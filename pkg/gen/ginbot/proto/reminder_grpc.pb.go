// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: ginbot/proto/reminder.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReminderService_GetReminder_FullMethodName         = "/ginbot.proto.ReminderService/GetReminder"
	ReminderService_ListReminders_FullMethodName       = "/ginbot.proto.ReminderService/ListReminders"
	ReminderService_CreateReminder_FullMethodName      = "/ginbot.proto.ReminderService/CreateReminder"
	ReminderService_UpdateReminder_FullMethodName      = "/ginbot.proto.ReminderService/UpdateReminder"
	ReminderService_DeleteReminder_FullMethodName      = "/ginbot.proto.ReminderService/DeleteReminder"
	ReminderService_GetExpiredReminders_FullMethodName = "/ginbot.proto.ReminderService/GetExpiredReminders"
)

// ReminderServiceClient is the client API for ReminderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReminderServiceClient interface {
	GetReminder(ctx context.Context, in *GetReminderReq, opts ...grpc.CallOption) (*GetReminderResp, error)
	ListReminders(ctx context.Context, in *ListRemindersReq, opts ...grpc.CallOption) (*ListRemindersResp, error)
	CreateReminder(ctx context.Context, in *CreateReminderReq, opts ...grpc.CallOption) (*CreateReminderResp, error)
	UpdateReminder(ctx context.Context, in *UpdateReminderReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteReminder(ctx context.Context, in *DeleteReminderReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetExpiredReminders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetExpiredRemindersResp, error)
}

type reminderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReminderServiceClient(cc grpc.ClientConnInterface) ReminderServiceClient {
	return &reminderServiceClient{cc}
}

func (c *reminderServiceClient) GetReminder(ctx context.Context, in *GetReminderReq, opts ...grpc.CallOption) (*GetReminderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReminderResp)
	err := c.cc.Invoke(ctx, ReminderService_GetReminder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminderServiceClient) ListReminders(ctx context.Context, in *ListRemindersReq, opts ...grpc.CallOption) (*ListRemindersResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRemindersResp)
	err := c.cc.Invoke(ctx, ReminderService_ListReminders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminderServiceClient) CreateReminder(ctx context.Context, in *CreateReminderReq, opts ...grpc.CallOption) (*CreateReminderResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReminderResp)
	err := c.cc.Invoke(ctx, ReminderService_CreateReminder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminderServiceClient) UpdateReminder(ctx context.Context, in *UpdateReminderReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ReminderService_UpdateReminder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminderServiceClient) DeleteReminder(ctx context.Context, in *DeleteReminderReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ReminderService_DeleteReminder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reminderServiceClient) GetExpiredReminders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetExpiredRemindersResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExpiredRemindersResp)
	err := c.cc.Invoke(ctx, ReminderService_GetExpiredReminders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReminderServiceServer is the server API for ReminderService service.
// All implementations must embed UnimplementedReminderServiceServer
// for forward compatibility.
type ReminderServiceServer interface {
	GetReminder(context.Context, *GetReminderReq) (*GetReminderResp, error)
	ListReminders(context.Context, *ListRemindersReq) (*ListRemindersResp, error)
	CreateReminder(context.Context, *CreateReminderReq) (*CreateReminderResp, error)
	UpdateReminder(context.Context, *UpdateReminderReq) (*emptypb.Empty, error)
	DeleteReminder(context.Context, *DeleteReminderReq) (*emptypb.Empty, error)
	GetExpiredReminders(context.Context, *emptypb.Empty) (*GetExpiredRemindersResp, error)
	mustEmbedUnimplementedReminderServiceServer()
}

// UnimplementedReminderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReminderServiceServer struct{}

func (UnimplementedReminderServiceServer) GetReminder(context.Context, *GetReminderReq) (*GetReminderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReminder not implemented")
}
func (UnimplementedReminderServiceServer) ListReminders(context.Context, *ListRemindersReq) (*ListRemindersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReminders not implemented")
}
func (UnimplementedReminderServiceServer) CreateReminder(context.Context, *CreateReminderReq) (*CreateReminderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReminder not implemented")
}
func (UnimplementedReminderServiceServer) UpdateReminder(context.Context, *UpdateReminderReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReminder not implemented")
}
func (UnimplementedReminderServiceServer) DeleteReminder(context.Context, *DeleteReminderReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReminder not implemented")
}
func (UnimplementedReminderServiceServer) GetExpiredReminders(context.Context, *emptypb.Empty) (*GetExpiredRemindersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpiredReminders not implemented")
}
func (UnimplementedReminderServiceServer) mustEmbedUnimplementedReminderServiceServer() {}
func (UnimplementedReminderServiceServer) testEmbeddedByValue()                         {}

// UnsafeReminderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReminderServiceServer will
// result in compilation errors.
type UnsafeReminderServiceServer interface {
	mustEmbedUnimplementedReminderServiceServer()
}

func RegisterReminderServiceServer(s grpc.ServiceRegistrar, srv ReminderServiceServer) {
	// If the following call pancis, it indicates UnimplementedReminderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReminderService_ServiceDesc, srv)
}

func _ReminderService_GetReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReminderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServiceServer).GetReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReminderService_GetReminder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServiceServer).GetReminder(ctx, req.(*GetReminderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReminderService_ListReminders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRemindersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServiceServer).ListReminders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReminderService_ListReminders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServiceServer).ListReminders(ctx, req.(*ListRemindersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReminderService_CreateReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReminderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServiceServer).CreateReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReminderService_CreateReminder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServiceServer).CreateReminder(ctx, req.(*CreateReminderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReminderService_UpdateReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReminderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServiceServer).UpdateReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReminderService_UpdateReminder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServiceServer).UpdateReminder(ctx, req.(*UpdateReminderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReminderService_DeleteReminder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReminderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServiceServer).DeleteReminder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReminderService_DeleteReminder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServiceServer).DeleteReminder(ctx, req.(*DeleteReminderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReminderService_GetExpiredReminders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReminderServiceServer).GetExpiredReminders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReminderService_GetExpiredReminders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReminderServiceServer).GetExpiredReminders(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ReminderService_ServiceDesc is the grpc.ServiceDesc for ReminderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReminderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ginbot.proto.ReminderService",
	HandlerType: (*ReminderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReminder",
			Handler:    _ReminderService_GetReminder_Handler,
		},
		{
			MethodName: "ListReminders",
			Handler:    _ReminderService_ListReminders_Handler,
		},
		{
			MethodName: "CreateReminder",
			Handler:    _ReminderService_CreateReminder_Handler,
		},
		{
			MethodName: "UpdateReminder",
			Handler:    _ReminderService_UpdateReminder_Handler,
		},
		{
			MethodName: "DeleteReminder",
			Handler:    _ReminderService_DeleteReminder_Handler,
		},
		{
			MethodName: "GetExpiredReminders",
			Handler:    _ReminderService_GetExpiredReminders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ginbot/proto/reminder.proto",
}
