// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: ginbot/proto/reverse.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReverseService_OpenClientActionStream_FullMethodName = "/ginbot.proto.ReverseService/OpenClientActionStream"
)

// ReverseServiceClient is the client API for ReverseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReverseServiceClient interface {
	OpenClientActionStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[OpenClientActionStreamReq, OpenClientActionStreamResp], error)
}

type reverseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReverseServiceClient(cc grpc.ClientConnInterface) ReverseServiceClient {
	return &reverseServiceClient{cc}
}

func (c *reverseServiceClient) OpenClientActionStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[OpenClientActionStreamReq, OpenClientActionStreamResp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ReverseService_ServiceDesc.Streams[0], ReverseService_OpenClientActionStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[OpenClientActionStreamReq, OpenClientActionStreamResp]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReverseService_OpenClientActionStreamClient = grpc.BidiStreamingClient[OpenClientActionStreamReq, OpenClientActionStreamResp]

// ReverseServiceServer is the server API for ReverseService service.
// All implementations must embed UnimplementedReverseServiceServer
// for forward compatibility.
type ReverseServiceServer interface {
	OpenClientActionStream(grpc.BidiStreamingServer[OpenClientActionStreamReq, OpenClientActionStreamResp]) error
	mustEmbedUnimplementedReverseServiceServer()
}

// UnimplementedReverseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReverseServiceServer struct{}

func (UnimplementedReverseServiceServer) OpenClientActionStream(grpc.BidiStreamingServer[OpenClientActionStreamReq, OpenClientActionStreamResp]) error {
	return status.Errorf(codes.Unimplemented, "method OpenClientActionStream not implemented")
}
func (UnimplementedReverseServiceServer) mustEmbedUnimplementedReverseServiceServer() {}
func (UnimplementedReverseServiceServer) testEmbeddedByValue()                        {}

// UnsafeReverseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReverseServiceServer will
// result in compilation errors.
type UnsafeReverseServiceServer interface {
	mustEmbedUnimplementedReverseServiceServer()
}

func RegisterReverseServiceServer(s grpc.ServiceRegistrar, srv ReverseServiceServer) {
	// If the following call pancis, it indicates UnimplementedReverseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReverseService_ServiceDesc, srv)
}

func _ReverseService_OpenClientActionStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReverseServiceServer).OpenClientActionStream(&grpc.GenericServerStream[OpenClientActionStreamReq, OpenClientActionStreamResp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReverseService_OpenClientActionStreamServer = grpc.BidiStreamingServer[OpenClientActionStreamReq, OpenClientActionStreamResp]

// ReverseService_ServiceDesc is the grpc.ServiceDesc for ReverseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReverseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ginbot.proto.ReverseService",
	HandlerType: (*ReverseServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenClientActionStream",
			Handler:       _ReverseService_OpenClientActionStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ginbot/proto/reverse.proto",
}
