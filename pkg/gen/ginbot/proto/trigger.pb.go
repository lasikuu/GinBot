// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.29.2
// source: ginbot/proto/trigger.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/gofeaturespb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message representing a Trigger
type Trigger struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          int64                  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	xxx_hidden_Phrase      *string                `protobuf:"bytes,2,opt,name=phrase" json:"phrase,omitempty"`
	xxx_hidden_Reply       *string                `protobuf:"bytes,3,opt,name=reply" json:"reply,omitempty"`
	xxx_hidden_Filename    *string                `protobuf:"bytes,4,opt,name=filename" json:"filename,omitempty"`
	xxx_hidden_UserId      int64                  `protobuf:"varint,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	xxx_hidden_Instances   *[]*TriggerInstance    `protobuf:"bytes,6,rep,name=instances" json:"instances,omitempty"`
	xxx_hidden_Chance      int32                  `protobuf:"varint,7,opt,name=chance" json:"chance,omitempty"`
	xxx_hidden_CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	xxx_hidden_UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *Trigger) Reset() {
	*x = Trigger{}
	mi := &file_ginbot_proto_trigger_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger) ProtoMessage() {}

func (x *Trigger) ProtoReflect() protoreflect.Message {
	mi := &file_ginbot_proto_trigger_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *Trigger) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *Trigger) GetPhrase() string {
	if x != nil {
		if x.xxx_hidden_Phrase != nil {
			return *x.xxx_hidden_Phrase
		}
		return ""
	}
	return ""
}

func (x *Trigger) GetReply() string {
	if x != nil {
		if x.xxx_hidden_Reply != nil {
			return *x.xxx_hidden_Reply
		}
		return ""
	}
	return ""
}

func (x *Trigger) GetFilename() string {
	if x != nil {
		if x.xxx_hidden_Filename != nil {
			return *x.xxx_hidden_Filename
		}
		return ""
	}
	return ""
}

func (x *Trigger) GetUserId() int64 {
	if x != nil {
		return x.xxx_hidden_UserId
	}
	return 0
}

func (x *Trigger) GetInstances() []*TriggerInstance {
	if x != nil {
		if x.xxx_hidden_Instances != nil {
			return *x.xxx_hidden_Instances
		}
	}
	return nil
}

func (x *Trigger) GetChance() int32 {
	if x != nil {
		return x.xxx_hidden_Chance
	}
	return 0
}

func (x *Trigger) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_CreatedAt
	}
	return nil
}

func (x *Trigger) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_UpdatedAt
	}
	return nil
}

func (x *Trigger) SetId(v int64) {
	x.xxx_hidden_Id = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 9)
}

func (x *Trigger) SetPhrase(v string) {
	x.xxx_hidden_Phrase = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 9)
}

func (x *Trigger) SetReply(v string) {
	x.xxx_hidden_Reply = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 9)
}

func (x *Trigger) SetFilename(v string) {
	x.xxx_hidden_Filename = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 9)
}

func (x *Trigger) SetUserId(v int64) {
	x.xxx_hidden_UserId = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 9)
}

func (x *Trigger) SetInstances(v []*TriggerInstance) {
	x.xxx_hidden_Instances = &v
}

func (x *Trigger) SetChance(v int32) {
	x.xxx_hidden_Chance = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 9)
}

func (x *Trigger) SetCreatedAt(v *timestamppb.Timestamp) {
	x.xxx_hidden_CreatedAt = v
}

func (x *Trigger) SetUpdatedAt(v *timestamppb.Timestamp) {
	x.xxx_hidden_UpdatedAt = v
}

func (x *Trigger) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *Trigger) HasPhrase() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *Trigger) HasReply() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *Trigger) HasFilename() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *Trigger) HasUserId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *Trigger) HasChance() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *Trigger) HasCreatedAt() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_CreatedAt != nil
}

func (x *Trigger) HasUpdatedAt() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_UpdatedAt != nil
}

func (x *Trigger) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = 0
}

func (x *Trigger) ClearPhrase() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Phrase = nil
}

func (x *Trigger) ClearReply() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Reply = nil
}

func (x *Trigger) ClearFilename() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Filename = nil
}

func (x *Trigger) ClearUserId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_UserId = 0
}

func (x *Trigger) ClearChance() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_Chance = 0
}

func (x *Trigger) ClearCreatedAt() {
	x.xxx_hidden_CreatedAt = nil
}

func (x *Trigger) ClearUpdatedAt() {
	x.xxx_hidden_UpdatedAt = nil
}

type Trigger_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// ID of the Trigger
	Id *int64
	// Phrase to trigger the response
	Phrase *string
	// Reply to send in response to the trigger
	Reply *string
	// File to send in response to the trigger
	Filename *string
	// User ID of the creator
	UserId *int64
	// Platform to trigger the response
	Instances []*TriggerInstance
	// Chance of the trigger to be triggered
	Chance *int32
	// Created at
	CreatedAt *timestamppb.Timestamp
	// Updated at
	UpdatedAt *timestamppb.Timestamp
}

func (b0 Trigger_builder) Build() *Trigger {
	m0 := &Trigger{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 9)
		x.xxx_hidden_Id = *b.Id
	}
	if b.Phrase != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 9)
		x.xxx_hidden_Phrase = b.Phrase
	}
	if b.Reply != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 9)
		x.xxx_hidden_Reply = b.Reply
	}
	if b.Filename != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 9)
		x.xxx_hidden_Filename = b.Filename
	}
	if b.UserId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 9)
		x.xxx_hidden_UserId = *b.UserId
	}
	x.xxx_hidden_Instances = &b.Instances
	if b.Chance != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 9)
		x.xxx_hidden_Chance = *b.Chance
	}
	x.xxx_hidden_CreatedAt = b.CreatedAt
	x.xxx_hidden_UpdatedAt = b.UpdatedAt
	return m0
}

type TriggerInstance struct {
	state                   protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_PlatformEnum Platform               `protobuf:"varint,1,opt,name=platform_enum,json=platformEnum,enum=ginbot.proto.Platform" json:"platform_enum,omitempty"`
	xxx_hidden_InstanceMeta *structpb.Struct       `protobuf:"bytes,2,opt,name=instance_meta,json=instanceMeta" json:"instance_meta,omitempty"`
	XXX_raceDetectHookData  protoimpl.RaceDetectHookData
	XXX_presence            [1]uint32
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *TriggerInstance) Reset() {
	*x = TriggerInstance{}
	mi := &file_ginbot_proto_trigger_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerInstance) ProtoMessage() {}

func (x *TriggerInstance) ProtoReflect() protoreflect.Message {
	mi := &file_ginbot_proto_trigger_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TriggerInstance) GetPlatformEnum() Platform {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_PlatformEnum
		}
	}
	return Platform_PLATFORM_UNSPECIFIED
}

func (x *TriggerInstance) GetInstanceMeta() *structpb.Struct {
	if x != nil {
		return x.xxx_hidden_InstanceMeta
	}
	return nil
}

func (x *TriggerInstance) SetPlatformEnum(v Platform) {
	x.xxx_hidden_PlatformEnum = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *TriggerInstance) SetInstanceMeta(v *structpb.Struct) {
	x.xxx_hidden_InstanceMeta = v
}

func (x *TriggerInstance) HasPlatformEnum() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TriggerInstance) HasInstanceMeta() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_InstanceMeta != nil
}

func (x *TriggerInstance) ClearPlatformEnum() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_PlatformEnum = Platform_PLATFORM_UNSPECIFIED
}

func (x *TriggerInstance) ClearInstanceMeta() {
	x.xxx_hidden_InstanceMeta = nil
}

type TriggerInstance_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Platform enum
	PlatformEnum *Platform
	// Instance meta information such as Server ID
	InstanceMeta *structpb.Struct
}

func (b0 TriggerInstance_builder) Build() *TriggerInstance {
	m0 := &TriggerInstance{}
	b, x := &b0, m0
	_, _ = b, x
	if b.PlatformEnum != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_PlatformEnum = *b.PlatformEnum
	}
	x.xxx_hidden_InstanceMeta = b.InstanceMeta
	return m0
}

type TryTriggerReq struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Instance    *TriggerInstance       `protobuf:"bytes,1,opt,name=instance" json:"instance,omitempty"`
	xxx_hidden_Phrase      *string                `protobuf:"bytes,2,opt,name=phrase" json:"phrase,omitempty"`
	xxx_hidden_UserId      int64                  `protobuf:"varint,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TryTriggerReq) Reset() {
	*x = TryTriggerReq{}
	mi := &file_ginbot_proto_trigger_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TryTriggerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryTriggerReq) ProtoMessage() {}

func (x *TryTriggerReq) ProtoReflect() protoreflect.Message {
	mi := &file_ginbot_proto_trigger_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TryTriggerReq) GetInstance() *TriggerInstance {
	if x != nil {
		return x.xxx_hidden_Instance
	}
	return nil
}

func (x *TryTriggerReq) GetPhrase() string {
	if x != nil {
		if x.xxx_hidden_Phrase != nil {
			return *x.xxx_hidden_Phrase
		}
		return ""
	}
	return ""
}

func (x *TryTriggerReq) GetUserId() int64 {
	if x != nil {
		return x.xxx_hidden_UserId
	}
	return 0
}

func (x *TryTriggerReq) SetInstance(v *TriggerInstance) {
	x.xxx_hidden_Instance = v
}

func (x *TryTriggerReq) SetPhrase(v string) {
	x.xxx_hidden_Phrase = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 3)
}

func (x *TryTriggerReq) SetUserId(v int64) {
	x.xxx_hidden_UserId = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 3)
}

func (x *TryTriggerReq) HasInstance() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Instance != nil
}

func (x *TryTriggerReq) HasPhrase() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TryTriggerReq) HasUserId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *TryTriggerReq) ClearInstance() {
	x.xxx_hidden_Instance = nil
}

func (x *TryTriggerReq) ClearPhrase() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Phrase = nil
}

func (x *TryTriggerReq) ClearUserId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_UserId = 0
}

type TryTriggerReq_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Platform to trigger the response
	Instance *TriggerInstance
	// Phrase to trigger the response
	Phrase *string
	// User ID of the triggerer
	UserId *int64
}

func (b0 TryTriggerReq_builder) Build() *TryTriggerReq {
	m0 := &TryTriggerReq{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Instance = b.Instance
	if b.Phrase != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 3)
		x.xxx_hidden_Phrase = b.Phrase
	}
	if b.UserId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 3)
		x.xxx_hidden_UserId = *b.UserId
	}
	return m0
}

type TryTriggerResp struct {
	state                  protoimpl.MessageState      `protogen:"opaque.v1"`
	xxx_hidden_Id          int64                       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	xxx_hidden_OneofReply  isTryTriggerResp_OneofReply `protobuf_oneof:"oneof_reply"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *TryTriggerResp) Reset() {
	*x = TryTriggerResp{}
	mi := &file_ginbot_proto_trigger_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TryTriggerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryTriggerResp) ProtoMessage() {}

func (x *TryTriggerResp) ProtoReflect() protoreflect.Message {
	mi := &file_ginbot_proto_trigger_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TryTriggerResp) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *TryTriggerResp) GetReply() string {
	if x != nil {
		if x, ok := x.xxx_hidden_OneofReply.(*tryTriggerResp_Reply); ok {
			return x.Reply
		}
	}
	return ""
}

func (x *TryTriggerResp) GetFilename() string {
	if x != nil {
		if x, ok := x.xxx_hidden_OneofReply.(*tryTriggerResp_Filename); ok {
			return x.Filename
		}
	}
	return ""
}

func (x *TryTriggerResp) SetId(v int64) {
	x.xxx_hidden_Id = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 2)
}

func (x *TryTriggerResp) SetReply(v string) {
	x.xxx_hidden_OneofReply = &tryTriggerResp_Reply{v}
}

func (x *TryTriggerResp) SetFilename(v string) {
	x.xxx_hidden_OneofReply = &tryTriggerResp_Filename{v}
}

func (x *TryTriggerResp) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TryTriggerResp) HasOneofReply() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_OneofReply != nil
}

func (x *TryTriggerResp) HasReply() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OneofReply.(*tryTriggerResp_Reply)
	return ok
}

func (x *TryTriggerResp) HasFilename() bool {
	if x == nil {
		return false
	}
	_, ok := x.xxx_hidden_OneofReply.(*tryTriggerResp_Filename)
	return ok
}

func (x *TryTriggerResp) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = 0
}

func (x *TryTriggerResp) ClearOneofReply() {
	x.xxx_hidden_OneofReply = nil
}

func (x *TryTriggerResp) ClearReply() {
	if _, ok := x.xxx_hidden_OneofReply.(*tryTriggerResp_Reply); ok {
		x.xxx_hidden_OneofReply = nil
	}
}

func (x *TryTriggerResp) ClearFilename() {
	if _, ok := x.xxx_hidden_OneofReply.(*tryTriggerResp_Filename); ok {
		x.xxx_hidden_OneofReply = nil
	}
}

const TryTriggerResp_OneofReply_not_set_case case_TryTriggerResp_OneofReply = 0
const TryTriggerResp_Reply_case case_TryTriggerResp_OneofReply = 2
const TryTriggerResp_Filename_case case_TryTriggerResp_OneofReply = 3

func (x *TryTriggerResp) WhichOneofReply() case_TryTriggerResp_OneofReply {
	if x == nil {
		return TryTriggerResp_OneofReply_not_set_case
	}
	switch x.xxx_hidden_OneofReply.(type) {
	case *tryTriggerResp_Reply:
		return TryTriggerResp_Reply_case
	case *tryTriggerResp_Filename:
		return TryTriggerResp_Filename_case
	default:
		return TryTriggerResp_OneofReply_not_set_case
	}
}

type TryTriggerResp_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// ID of the Trigger
	Id *int64
	// Fields of oneof xxx_hidden_OneofReply:
	// Reply to send in response to the trigger
	Reply *string
	// File to send in response to the trigger
	Filename *string
	// -- end of xxx_hidden_OneofReply
}

func (b0 TryTriggerResp_builder) Build() *TryTriggerResp {
	m0 := &TryTriggerResp{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 2)
		x.xxx_hidden_Id = *b.Id
	}
	if b.Reply != nil {
		x.xxx_hidden_OneofReply = &tryTriggerResp_Reply{*b.Reply}
	}
	if b.Filename != nil {
		x.xxx_hidden_OneofReply = &tryTriggerResp_Filename{*b.Filename}
	}
	return m0
}

type case_TryTriggerResp_OneofReply protoreflect.FieldNumber

func (x case_TryTriggerResp_OneofReply) String() string {
	md := file_ginbot_proto_trigger_proto_msgTypes[3].Descriptor()
	if x == 0 {
		return "not set"
	}
	return protoimpl.X.MessageFieldStringOf(md, protoreflect.FieldNumber(x))
}

type isTryTriggerResp_OneofReply interface {
	isTryTriggerResp_OneofReply()
}

type tryTriggerResp_Reply struct {
	// Reply to send in response to the trigger
	Reply string `protobuf:"bytes,2,opt,name=reply,oneof"`
}

type tryTriggerResp_Filename struct {
	// File to send in response to the trigger
	Filename string `protobuf:"bytes,3,opt,name=filename,oneof"`
}

func (*tryTriggerResp_Reply) isTryTriggerResp_OneofReply() {}

func (*tryTriggerResp_Filename) isTryTriggerResp_OneofReply() {}

type GetTriggerReq struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          int64                  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *GetTriggerReq) Reset() {
	*x = GetTriggerReq{}
	mi := &file_ginbot_proto_trigger_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTriggerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTriggerReq) ProtoMessage() {}

func (x *GetTriggerReq) ProtoReflect() protoreflect.Message {
	mi := &file_ginbot_proto_trigger_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetTriggerReq) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *GetTriggerReq) SetId(v int64) {
	x.xxx_hidden_Id = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *GetTriggerReq) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *GetTriggerReq) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = 0
}

type GetTriggerReq_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// ID of the Trigger
	Id *int64
}

func (b0 GetTriggerReq_builder) Build() *GetTriggerReq {
	m0 := &GetTriggerReq{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Id = *b.Id
	}
	return m0
}

type GetTriggerResp struct {
	state              protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Trigger *Trigger               `protobuf:"bytes,1,opt,name=trigger" json:"trigger,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetTriggerResp) Reset() {
	*x = GetTriggerResp{}
	mi := &file_ginbot_proto_trigger_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTriggerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTriggerResp) ProtoMessage() {}

func (x *GetTriggerResp) ProtoReflect() protoreflect.Message {
	mi := &file_ginbot_proto_trigger_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *GetTriggerResp) GetTrigger() *Trigger {
	if x != nil {
		return x.xxx_hidden_Trigger
	}
	return nil
}

func (x *GetTriggerResp) SetTrigger(v *Trigger) {
	x.xxx_hidden_Trigger = v
}

func (x *GetTriggerResp) HasTrigger() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_Trigger != nil
}

func (x *GetTriggerResp) ClearTrigger() {
	x.xxx_hidden_Trigger = nil
}

type GetTriggerResp_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Trigger *Trigger
}

func (b0 GetTriggerResp_builder) Build() *GetTriggerResp {
	m0 := &GetTriggerResp{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Trigger = b.Trigger
	return m0
}

type ListTriggersReq struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Limit       int64                  `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	xxx_hidden_Offset      int64                  `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	xxx_hidden_Phrase      *string                `protobuf:"bytes,3,opt,name=phrase" json:"phrase,omitempty"`
	xxx_hidden_Reply       *string                `protobuf:"bytes,4,opt,name=reply" json:"reply,omitempty"`
	xxx_hidden_UserId      int64                  `protobuf:"varint,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	xxx_hidden_Instances   *[]*TriggerInstance    `protobuf:"bytes,6,rep,name=instances" json:"instances,omitempty"`
	xxx_hidden_PeriodStart *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=period_start,json=periodStart" json:"period_start,omitempty"`
	xxx_hidden_PeriodEnd   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=period_end,json=periodEnd" json:"period_end,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ListTriggersReq) Reset() {
	*x = ListTriggersReq{}
	mi := &file_ginbot_proto_trigger_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTriggersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTriggersReq) ProtoMessage() {}

func (x *ListTriggersReq) ProtoReflect() protoreflect.Message {
	mi := &file_ginbot_proto_trigger_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListTriggersReq) GetLimit() int64 {
	if x != nil {
		return x.xxx_hidden_Limit
	}
	return 0
}

func (x *ListTriggersReq) GetOffset() int64 {
	if x != nil {
		return x.xxx_hidden_Offset
	}
	return 0
}

func (x *ListTriggersReq) GetPhrase() string {
	if x != nil {
		if x.xxx_hidden_Phrase != nil {
			return *x.xxx_hidden_Phrase
		}
		return ""
	}
	return ""
}

func (x *ListTriggersReq) GetReply() string {
	if x != nil {
		if x.xxx_hidden_Reply != nil {
			return *x.xxx_hidden_Reply
		}
		return ""
	}
	return ""
}

func (x *ListTriggersReq) GetUserId() int64 {
	if x != nil {
		return x.xxx_hidden_UserId
	}
	return 0
}

func (x *ListTriggersReq) GetInstances() []*TriggerInstance {
	if x != nil {
		if x.xxx_hidden_Instances != nil {
			return *x.xxx_hidden_Instances
		}
	}
	return nil
}

func (x *ListTriggersReq) GetPeriodStart() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_PeriodStart
	}
	return nil
}

func (x *ListTriggersReq) GetPeriodEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.xxx_hidden_PeriodEnd
	}
	return nil
}

func (x *ListTriggersReq) SetLimit(v int64) {
	x.xxx_hidden_Limit = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 8)
}

func (x *ListTriggersReq) SetOffset(v int64) {
	x.xxx_hidden_Offset = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 8)
}

func (x *ListTriggersReq) SetPhrase(v string) {
	x.xxx_hidden_Phrase = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 8)
}

func (x *ListTriggersReq) SetReply(v string) {
	x.xxx_hidden_Reply = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 8)
}

func (x *ListTriggersReq) SetUserId(v int64) {
	x.xxx_hidden_UserId = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 8)
}

func (x *ListTriggersReq) SetInstances(v []*TriggerInstance) {
	x.xxx_hidden_Instances = &v
}

func (x *ListTriggersReq) SetPeriodStart(v *timestamppb.Timestamp) {
	x.xxx_hidden_PeriodStart = v
}

func (x *ListTriggersReq) SetPeriodEnd(v *timestamppb.Timestamp) {
	x.xxx_hidden_PeriodEnd = v
}

func (x *ListTriggersReq) HasLimit() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *ListTriggersReq) HasOffset() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *ListTriggersReq) HasPhrase() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *ListTriggersReq) HasReply() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *ListTriggersReq) HasUserId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *ListTriggersReq) HasPeriodStart() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_PeriodStart != nil
}

func (x *ListTriggersReq) HasPeriodEnd() bool {
	if x == nil {
		return false
	}
	return x.xxx_hidden_PeriodEnd != nil
}

func (x *ListTriggersReq) ClearLimit() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Limit = 0
}

func (x *ListTriggersReq) ClearOffset() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Offset = 0
}

func (x *ListTriggersReq) ClearPhrase() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Phrase = nil
}

func (x *ListTriggersReq) ClearReply() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Reply = nil
}

func (x *ListTriggersReq) ClearUserId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_UserId = 0
}

func (x *ListTriggersReq) ClearPeriodStart() {
	x.xxx_hidden_PeriodStart = nil
}

func (x *ListTriggersReq) ClearPeriodEnd() {
	x.xxx_hidden_PeriodEnd = nil
}

type ListTriggersReq_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Limit the number of triggers returned
	Limit *int64
	// Offset the triggers returned
	Offset *int64
	// Search field for trigger phrases
	Phrase *string
	// Search field for trigger replies
	Reply *string
	// User ID of the creator
	UserId *int64
	// Platforms to trigger the response on
	Instances []*TriggerInstance
	// Search for triggers starting from this date
	PeriodStart *timestamppb.Timestamp
	// Search for triggers ending at this date
	PeriodEnd *timestamppb.Timestamp
}

func (b0 ListTriggersReq_builder) Build() *ListTriggersReq {
	m0 := &ListTriggersReq{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Limit != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 8)
		x.xxx_hidden_Limit = *b.Limit
	}
	if b.Offset != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 8)
		x.xxx_hidden_Offset = *b.Offset
	}
	if b.Phrase != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 8)
		x.xxx_hidden_Phrase = b.Phrase
	}
	if b.Reply != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 8)
		x.xxx_hidden_Reply = b.Reply
	}
	if b.UserId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 8)
		x.xxx_hidden_UserId = *b.UserId
	}
	x.xxx_hidden_Instances = &b.Instances
	x.xxx_hidden_PeriodStart = b.PeriodStart
	x.xxx_hidden_PeriodEnd = b.PeriodEnd
	return m0
}

type ListTriggersResp struct {
	state               protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Triggers *[]*Trigger            `protobuf:"bytes,1,rep,name=triggers" json:"triggers,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ListTriggersResp) Reset() {
	*x = ListTriggersResp{}
	mi := &file_ginbot_proto_trigger_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTriggersResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTriggersResp) ProtoMessage() {}

func (x *ListTriggersResp) ProtoReflect() protoreflect.Message {
	mi := &file_ginbot_proto_trigger_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *ListTriggersResp) GetTriggers() []*Trigger {
	if x != nil {
		if x.xxx_hidden_Triggers != nil {
			return *x.xxx_hidden_Triggers
		}
	}
	return nil
}

func (x *ListTriggersResp) SetTriggers(v []*Trigger) {
	x.xxx_hidden_Triggers = &v
}

type ListTriggersResp_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	Triggers []*Trigger
}

func (b0 ListTriggersResp_builder) Build() *ListTriggersResp {
	m0 := &ListTriggersResp{}
	b, x := &b0, m0
	_, _ = b, x
	x.xxx_hidden_Triggers = &b.Triggers
	return m0
}

type CreateTriggerReq struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Phrase      *string                `protobuf:"bytes,1,opt,name=phrase" json:"phrase,omitempty"`
	xxx_hidden_Reply       *string                `protobuf:"bytes,2,opt,name=reply" json:"reply,omitempty"`
	xxx_hidden_Filename    *string                `protobuf:"bytes,3,opt,name=filename" json:"filename,omitempty"`
	xxx_hidden_UserId      int64                  `protobuf:"varint,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	xxx_hidden_Instances   *[]*TriggerInstance    `protobuf:"bytes,5,rep,name=instances" json:"instances,omitempty"`
	xxx_hidden_Chance      int32                  `protobuf:"varint,6,opt,name=chance" json:"chance,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CreateTriggerReq) Reset() {
	*x = CreateTriggerReq{}
	mi := &file_ginbot_proto_trigger_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTriggerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTriggerReq) ProtoMessage() {}

func (x *CreateTriggerReq) ProtoReflect() protoreflect.Message {
	mi := &file_ginbot_proto_trigger_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CreateTriggerReq) GetPhrase() string {
	if x != nil {
		if x.xxx_hidden_Phrase != nil {
			return *x.xxx_hidden_Phrase
		}
		return ""
	}
	return ""
}

func (x *CreateTriggerReq) GetReply() string {
	if x != nil {
		if x.xxx_hidden_Reply != nil {
			return *x.xxx_hidden_Reply
		}
		return ""
	}
	return ""
}

func (x *CreateTriggerReq) GetFilename() string {
	if x != nil {
		if x.xxx_hidden_Filename != nil {
			return *x.xxx_hidden_Filename
		}
		return ""
	}
	return ""
}

func (x *CreateTriggerReq) GetUserId() int64 {
	if x != nil {
		return x.xxx_hidden_UserId
	}
	return 0
}

func (x *CreateTriggerReq) GetInstances() []*TriggerInstance {
	if x != nil {
		if x.xxx_hidden_Instances != nil {
			return *x.xxx_hidden_Instances
		}
	}
	return nil
}

func (x *CreateTriggerReq) GetChance() int32 {
	if x != nil {
		return x.xxx_hidden_Chance
	}
	return 0
}

func (x *CreateTriggerReq) SetPhrase(v string) {
	x.xxx_hidden_Phrase = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 6)
}

func (x *CreateTriggerReq) SetReply(v string) {
	x.xxx_hidden_Reply = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 6)
}

func (x *CreateTriggerReq) SetFilename(v string) {
	x.xxx_hidden_Filename = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 6)
}

func (x *CreateTriggerReq) SetUserId(v int64) {
	x.xxx_hidden_UserId = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 6)
}

func (x *CreateTriggerReq) SetInstances(v []*TriggerInstance) {
	x.xxx_hidden_Instances = &v
}

func (x *CreateTriggerReq) SetChance(v int32) {
	x.xxx_hidden_Chance = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 5, 6)
}

func (x *CreateTriggerReq) HasPhrase() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CreateTriggerReq) HasReply() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *CreateTriggerReq) HasFilename() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *CreateTriggerReq) HasUserId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *CreateTriggerReq) HasChance() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 5)
}

func (x *CreateTriggerReq) ClearPhrase() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Phrase = nil
}

func (x *CreateTriggerReq) ClearReply() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Reply = nil
}

func (x *CreateTriggerReq) ClearFilename() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Filename = nil
}

func (x *CreateTriggerReq) ClearUserId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_UserId = 0
}

func (x *CreateTriggerReq) ClearChance() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 5)
	x.xxx_hidden_Chance = 0
}

type CreateTriggerReq_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// Phrase to trigger the response
	Phrase *string
	// Reply to send in response to the trigger
	Reply *string
	// File to send in response to the trigger
	Filename *string
	// User ID of the creator
	UserId *int64
	// Platforms to trigger the response on
	Instances []*TriggerInstance
	// Chance of the trigger to be triggered
	Chance *int32
}

func (b0 CreateTriggerReq_builder) Build() *CreateTriggerReq {
	m0 := &CreateTriggerReq{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Phrase != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 6)
		x.xxx_hidden_Phrase = b.Phrase
	}
	if b.Reply != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 6)
		x.xxx_hidden_Reply = b.Reply
	}
	if b.Filename != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 6)
		x.xxx_hidden_Filename = b.Filename
	}
	if b.UserId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 6)
		x.xxx_hidden_UserId = *b.UserId
	}
	x.xxx_hidden_Instances = &b.Instances
	if b.Chance != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 5, 6)
		x.xxx_hidden_Chance = *b.Chance
	}
	return m0
}

type CreateTriggerResp struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          int64                  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CreateTriggerResp) Reset() {
	*x = CreateTriggerResp{}
	mi := &file_ginbot_proto_trigger_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTriggerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTriggerResp) ProtoMessage() {}

func (x *CreateTriggerResp) ProtoReflect() protoreflect.Message {
	mi := &file_ginbot_proto_trigger_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *CreateTriggerResp) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *CreateTriggerResp) SetId(v int64) {
	x.xxx_hidden_Id = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *CreateTriggerResp) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *CreateTriggerResp) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = 0
}

type CreateTriggerResp_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// ID of the Trigger
	Id *int64
}

func (b0 CreateTriggerResp_builder) Build() *CreateTriggerResp {
	m0 := &CreateTriggerResp{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Id = *b.Id
	}
	return m0
}

type UpdateTriggerReq struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          int64                  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	xxx_hidden_Phrase      *string                `protobuf:"bytes,2,opt,name=phrase" json:"phrase,omitempty"`
	xxx_hidden_Reply       *string                `protobuf:"bytes,3,opt,name=reply" json:"reply,omitempty"`
	xxx_hidden_Filename    *string                `protobuf:"bytes,4,opt,name=filename" json:"filename,omitempty"`
	xxx_hidden_UserId      int64                  `protobuf:"varint,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	xxx_hidden_Instances   *[]*TriggerInstance    `protobuf:"bytes,6,rep,name=instances" json:"instances,omitempty"`
	xxx_hidden_Chance      int32                  `protobuf:"varint,7,opt,name=chance" json:"chance,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *UpdateTriggerReq) Reset() {
	*x = UpdateTriggerReq{}
	mi := &file_ginbot_proto_trigger_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateTriggerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTriggerReq) ProtoMessage() {}

func (x *UpdateTriggerReq) ProtoReflect() protoreflect.Message {
	mi := &file_ginbot_proto_trigger_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *UpdateTriggerReq) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *UpdateTriggerReq) GetPhrase() string {
	if x != nil {
		if x.xxx_hidden_Phrase != nil {
			return *x.xxx_hidden_Phrase
		}
		return ""
	}
	return ""
}

func (x *UpdateTriggerReq) GetReply() string {
	if x != nil {
		if x.xxx_hidden_Reply != nil {
			return *x.xxx_hidden_Reply
		}
		return ""
	}
	return ""
}

func (x *UpdateTriggerReq) GetFilename() string {
	if x != nil {
		if x.xxx_hidden_Filename != nil {
			return *x.xxx_hidden_Filename
		}
		return ""
	}
	return ""
}

func (x *UpdateTriggerReq) GetUserId() int64 {
	if x != nil {
		return x.xxx_hidden_UserId
	}
	return 0
}

func (x *UpdateTriggerReq) GetInstances() []*TriggerInstance {
	if x != nil {
		if x.xxx_hidden_Instances != nil {
			return *x.xxx_hidden_Instances
		}
	}
	return nil
}

func (x *UpdateTriggerReq) GetChance() int32 {
	if x != nil {
		return x.xxx_hidden_Chance
	}
	return 0
}

func (x *UpdateTriggerReq) SetId(v int64) {
	x.xxx_hidden_Id = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 7)
}

func (x *UpdateTriggerReq) SetPhrase(v string) {
	x.xxx_hidden_Phrase = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 7)
}

func (x *UpdateTriggerReq) SetReply(v string) {
	x.xxx_hidden_Reply = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 7)
}

func (x *UpdateTriggerReq) SetFilename(v string) {
	x.xxx_hidden_Filename = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 7)
}

func (x *UpdateTriggerReq) SetUserId(v int64) {
	x.xxx_hidden_UserId = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 7)
}

func (x *UpdateTriggerReq) SetInstances(v []*TriggerInstance) {
	x.xxx_hidden_Instances = &v
}

func (x *UpdateTriggerReq) SetChance(v int32) {
	x.xxx_hidden_Chance = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 6, 7)
}

func (x *UpdateTriggerReq) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *UpdateTriggerReq) HasPhrase() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *UpdateTriggerReq) HasReply() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *UpdateTriggerReq) HasFilename() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *UpdateTriggerReq) HasUserId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *UpdateTriggerReq) HasChance() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 6)
}

func (x *UpdateTriggerReq) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = 0
}

func (x *UpdateTriggerReq) ClearPhrase() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_Phrase = nil
}

func (x *UpdateTriggerReq) ClearReply() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_Reply = nil
}

func (x *UpdateTriggerReq) ClearFilename() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_Filename = nil
}

func (x *UpdateTriggerReq) ClearUserId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_UserId = 0
}

func (x *UpdateTriggerReq) ClearChance() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 6)
	x.xxx_hidden_Chance = 0
}

type UpdateTriggerReq_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// ID of the Trigger
	Id *int64
	// Phrase to trigger the response
	Phrase *string
	// Reply to send in response to the trigger
	Reply *string
	// File to send in response to the trigger
	Filename *string
	// User ID of the creator
	UserId *int64
	// Platforms to trigger the response on
	Instances []*TriggerInstance
	// Chance of the trigger to be triggered
	Chance *int32
}

func (b0 UpdateTriggerReq_builder) Build() *UpdateTriggerReq {
	m0 := &UpdateTriggerReq{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 7)
		x.xxx_hidden_Id = *b.Id
	}
	if b.Phrase != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 7)
		x.xxx_hidden_Phrase = b.Phrase
	}
	if b.Reply != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 7)
		x.xxx_hidden_Reply = b.Reply
	}
	if b.Filename != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 7)
		x.xxx_hidden_Filename = b.Filename
	}
	if b.UserId != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 7)
		x.xxx_hidden_UserId = *b.UserId
	}
	x.xxx_hidden_Instances = &b.Instances
	if b.Chance != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 6, 7)
		x.xxx_hidden_Chance = *b.Chance
	}
	return m0
}

type DeleteTriggerReq struct {
	state                  protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Id          int64                  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	XXX_raceDetectHookData protoimpl.RaceDetectHookData
	XXX_presence           [1]uint32
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *DeleteTriggerReq) Reset() {
	*x = DeleteTriggerReq{}
	mi := &file_ginbot_proto_trigger_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTriggerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTriggerReq) ProtoMessage() {}

func (x *DeleteTriggerReq) ProtoReflect() protoreflect.Message {
	mi := &file_ginbot_proto_trigger_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *DeleteTriggerReq) GetId() int64 {
	if x != nil {
		return x.xxx_hidden_Id
	}
	return 0
}

func (x *DeleteTriggerReq) SetId(v int64) {
	x.xxx_hidden_Id = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 1)
}

func (x *DeleteTriggerReq) HasId() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *DeleteTriggerReq) ClearId() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Id = 0
}

type DeleteTriggerReq_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// ID of the Trigger
	Id *int64
}

func (b0 DeleteTriggerReq_builder) Build() *DeleteTriggerReq {
	m0 := &DeleteTriggerReq{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Id != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 1)
		x.xxx_hidden_Id = *b.Id
	}
	return m0
}

var File_ginbot_proto_trigger_proto protoreflect.FileDescriptor

var file_ginbot_proto_trigger_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x67, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x69, 0x6e, 0x62,
	0x6f, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc7, 0x02, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x8c, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x67, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x3c, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x22,
	0x7b, 0x0a, 0x0d, 0x54, 0x72, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x39, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x72,
	0x61, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x65, 0x0a, 0x0e,
	0x54, 0x72, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x1f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x41, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x22, 0xbd, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x72,
	0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x3b, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x3d, 0x0a,
	0x0c, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x22, 0x45, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x08, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x52, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x22, 0xca,
	0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x6e, 0x62,
	0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x23, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xda, 0x01, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x22, 0x0a,
	0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x32, 0xd5, 0x03, 0x0a, 0x0e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0a, 0x54, 0x72, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x12, 0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x72, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a,
	0x1c, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x72, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x67, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4d, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x50, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x47, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x47, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x12, 0x1e, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x38, 0x5a, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x61, 0x73, 0x69, 0x6b, 0x75, 0x75, 0x2f,
	0x47, 0x69, 0x6e, 0x42, 0x6f, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67,
	0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x92, 0x03, 0x05, 0xd2, 0x3e,
	0x02, 0x10, 0x03, 0x62, 0x08, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0xe8, 0x07,
}

var file_ginbot_proto_trigger_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_ginbot_proto_trigger_proto_goTypes = []any{
	(*Trigger)(nil),               // 0: ginbot.proto.Trigger
	(*TriggerInstance)(nil),       // 1: ginbot.proto.TriggerInstance
	(*TryTriggerReq)(nil),         // 2: ginbot.proto.TryTriggerReq
	(*TryTriggerResp)(nil),        // 3: ginbot.proto.TryTriggerResp
	(*GetTriggerReq)(nil),         // 4: ginbot.proto.GetTriggerReq
	(*GetTriggerResp)(nil),        // 5: ginbot.proto.GetTriggerResp
	(*ListTriggersReq)(nil),       // 6: ginbot.proto.ListTriggersReq
	(*ListTriggersResp)(nil),      // 7: ginbot.proto.ListTriggersResp
	(*CreateTriggerReq)(nil),      // 8: ginbot.proto.CreateTriggerReq
	(*CreateTriggerResp)(nil),     // 9: ginbot.proto.CreateTriggerResp
	(*UpdateTriggerReq)(nil),      // 10: ginbot.proto.UpdateTriggerReq
	(*DeleteTriggerReq)(nil),      // 11: ginbot.proto.DeleteTriggerReq
	(*timestamppb.Timestamp)(nil), // 12: google.protobuf.Timestamp
	(Platform)(0),                 // 13: ginbot.proto.Platform
	(*structpb.Struct)(nil),       // 14: google.protobuf.Struct
	(*emptypb.Empty)(nil),         // 15: google.protobuf.Empty
}
var file_ginbot_proto_trigger_proto_depIdxs = []int32{
	1,  // 0: ginbot.proto.Trigger.instances:type_name -> ginbot.proto.TriggerInstance
	12, // 1: ginbot.proto.Trigger.created_at:type_name -> google.protobuf.Timestamp
	12, // 2: ginbot.proto.Trigger.updated_at:type_name -> google.protobuf.Timestamp
	13, // 3: ginbot.proto.TriggerInstance.platform_enum:type_name -> ginbot.proto.Platform
	14, // 4: ginbot.proto.TriggerInstance.instance_meta:type_name -> google.protobuf.Struct
	1,  // 5: ginbot.proto.TryTriggerReq.instance:type_name -> ginbot.proto.TriggerInstance
	0,  // 6: ginbot.proto.GetTriggerResp.trigger:type_name -> ginbot.proto.Trigger
	1,  // 7: ginbot.proto.ListTriggersReq.instances:type_name -> ginbot.proto.TriggerInstance
	12, // 8: ginbot.proto.ListTriggersReq.period_start:type_name -> google.protobuf.Timestamp
	12, // 9: ginbot.proto.ListTriggersReq.period_end:type_name -> google.protobuf.Timestamp
	0,  // 10: ginbot.proto.ListTriggersResp.triggers:type_name -> ginbot.proto.Trigger
	1,  // 11: ginbot.proto.CreateTriggerReq.instances:type_name -> ginbot.proto.TriggerInstance
	1,  // 12: ginbot.proto.UpdateTriggerReq.instances:type_name -> ginbot.proto.TriggerInstance
	2,  // 13: ginbot.proto.TriggerService.TryTrigger:input_type -> ginbot.proto.TryTriggerReq
	4,  // 14: ginbot.proto.TriggerService.GetTrigger:input_type -> ginbot.proto.GetTriggerReq
	6,  // 15: ginbot.proto.TriggerService.ListTriggers:input_type -> ginbot.proto.ListTriggersReq
	8,  // 16: ginbot.proto.TriggerService.CreateTrigger:input_type -> ginbot.proto.CreateTriggerReq
	10, // 17: ginbot.proto.TriggerService.UpdateTrigger:input_type -> ginbot.proto.UpdateTriggerReq
	11, // 18: ginbot.proto.TriggerService.DeleteTrigger:input_type -> ginbot.proto.DeleteTriggerReq
	3,  // 19: ginbot.proto.TriggerService.TryTrigger:output_type -> ginbot.proto.TryTriggerResp
	5,  // 20: ginbot.proto.TriggerService.GetTrigger:output_type -> ginbot.proto.GetTriggerResp
	7,  // 21: ginbot.proto.TriggerService.ListTriggers:output_type -> ginbot.proto.ListTriggersResp
	9,  // 22: ginbot.proto.TriggerService.CreateTrigger:output_type -> ginbot.proto.CreateTriggerResp
	15, // 23: ginbot.proto.TriggerService.UpdateTrigger:output_type -> google.protobuf.Empty
	15, // 24: ginbot.proto.TriggerService.DeleteTrigger:output_type -> google.protobuf.Empty
	19, // [19:25] is the sub-list for method output_type
	13, // [13:19] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_ginbot_proto_trigger_proto_init() }
func file_ginbot_proto_trigger_proto_init() {
	if File_ginbot_proto_trigger_proto != nil {
		return
	}
	file_ginbot_proto_platform_proto_init()
	file_ginbot_proto_trigger_proto_msgTypes[3].OneofWrappers = []any{
		(*tryTriggerResp_Reply)(nil),
		(*tryTriggerResp_Filename)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ginbot_proto_trigger_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ginbot_proto_trigger_proto_goTypes,
		DependencyIndexes: file_ginbot_proto_trigger_proto_depIdxs,
		MessageInfos:      file_ginbot_proto_trigger_proto_msgTypes,
	}.Build()
	File_ginbot_proto_trigger_proto = out.File
	file_ginbot_proto_trigger_proto_rawDesc = nil
	file_ginbot_proto_trigger_proto_goTypes = nil
	file_ginbot_proto_trigger_proto_depIdxs = nil
}
