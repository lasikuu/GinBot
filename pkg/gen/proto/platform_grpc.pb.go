// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: proto/platform.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PlatformService_GetPlatform_FullMethodName    = "/ginbot.platform.PlatformService/GetPlatform"
	PlatformService_ListPlatforms_FullMethodName  = "/ginbot.platform.PlatformService/ListPlatforms"
	PlatformService_CreatePlatform_FullMethodName = "/ginbot.platform.PlatformService/CreatePlatform"
	PlatformService_UpdatePlatform_FullMethodName = "/ginbot.platform.PlatformService/UpdatePlatform"
	PlatformService_DeletePlatform_FullMethodName = "/ginbot.platform.PlatformService/DeletePlatform"
)

// PlatformServiceClient is the client API for PlatformService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlatformServiceClient interface {
	GetPlatform(ctx context.Context, in *GetPlatformReq, opts ...grpc.CallOption) (*GetPlatformResp, error)
	ListPlatforms(ctx context.Context, in *ListPlatformsReq, opts ...grpc.CallOption) (*ListPlatformsResp, error)
	CreatePlatform(ctx context.Context, in *CreatePlatformReq, opts ...grpc.CallOption) (*CreatePlatformResp, error)
	UpdatePlatform(ctx context.Context, in *UpdatePlatformReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeletePlatform(ctx context.Context, in *DeletePlatformReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type platformServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlatformServiceClient(cc grpc.ClientConnInterface) PlatformServiceClient {
	return &platformServiceClient{cc}
}

func (c *platformServiceClient) GetPlatform(ctx context.Context, in *GetPlatformReq, opts ...grpc.CallOption) (*GetPlatformResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPlatformResp)
	err := c.cc.Invoke(ctx, PlatformService_GetPlatform_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceClient) ListPlatforms(ctx context.Context, in *ListPlatformsReq, opts ...grpc.CallOption) (*ListPlatformsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPlatformsResp)
	err := c.cc.Invoke(ctx, PlatformService_ListPlatforms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceClient) CreatePlatform(ctx context.Context, in *CreatePlatformReq, opts ...grpc.CallOption) (*CreatePlatformResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePlatformResp)
	err := c.cc.Invoke(ctx, PlatformService_CreatePlatform_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceClient) UpdatePlatform(ctx context.Context, in *UpdatePlatformReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PlatformService_UpdatePlatform_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceClient) DeletePlatform(ctx context.Context, in *DeletePlatformReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PlatformService_DeletePlatform_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlatformServiceServer is the server API for PlatformService service.
// All implementations must embed UnimplementedPlatformServiceServer
// for forward compatibility.
type PlatformServiceServer interface {
	GetPlatform(context.Context, *GetPlatformReq) (*GetPlatformResp, error)
	ListPlatforms(context.Context, *ListPlatformsReq) (*ListPlatformsResp, error)
	CreatePlatform(context.Context, *CreatePlatformReq) (*CreatePlatformResp, error)
	UpdatePlatform(context.Context, *UpdatePlatformReq) (*emptypb.Empty, error)
	DeletePlatform(context.Context, *DeletePlatformReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedPlatformServiceServer()
}

// UnimplementedPlatformServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlatformServiceServer struct{}

func (UnimplementedPlatformServiceServer) GetPlatform(context.Context, *GetPlatformReq) (*GetPlatformResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatform not implemented")
}
func (UnimplementedPlatformServiceServer) ListPlatforms(context.Context, *ListPlatformsReq) (*ListPlatformsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlatforms not implemented")
}
func (UnimplementedPlatformServiceServer) CreatePlatform(context.Context, *CreatePlatformReq) (*CreatePlatformResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlatform not implemented")
}
func (UnimplementedPlatformServiceServer) UpdatePlatform(context.Context, *UpdatePlatformReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlatform not implemented")
}
func (UnimplementedPlatformServiceServer) DeletePlatform(context.Context, *DeletePlatformReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlatform not implemented")
}
func (UnimplementedPlatformServiceServer) mustEmbedUnimplementedPlatformServiceServer() {}
func (UnimplementedPlatformServiceServer) testEmbeddedByValue()                         {}

// UnsafePlatformServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlatformServiceServer will
// result in compilation errors.
type UnsafePlatformServiceServer interface {
	mustEmbedUnimplementedPlatformServiceServer()
}

func RegisterPlatformServiceServer(s grpc.ServiceRegistrar, srv PlatformServiceServer) {
	// If the following call pancis, it indicates UnimplementedPlatformServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PlatformService_ServiceDesc, srv)
}

func _PlatformService_GetPlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlatformReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceServer).GetPlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformService_GetPlatform_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceServer).GetPlatform(ctx, req.(*GetPlatformReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformService_ListPlatforms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlatformsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceServer).ListPlatforms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformService_ListPlatforms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceServer).ListPlatforms(ctx, req.(*ListPlatformsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformService_CreatePlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlatformReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceServer).CreatePlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformService_CreatePlatform_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceServer).CreatePlatform(ctx, req.(*CreatePlatformReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformService_UpdatePlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlatformReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceServer).UpdatePlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformService_UpdatePlatform_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceServer).UpdatePlatform(ctx, req.(*UpdatePlatformReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformService_DeletePlatform_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlatformReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceServer).DeletePlatform(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlatformService_DeletePlatform_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceServer).DeletePlatform(ctx, req.(*DeletePlatformReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PlatformService_ServiceDesc is the grpc.ServiceDesc for PlatformService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlatformService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ginbot.platform.PlatformService",
	HandlerType: (*PlatformServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlatform",
			Handler:    _PlatformService_GetPlatform_Handler,
		},
		{
			MethodName: "ListPlatforms",
			Handler:    _PlatformService_ListPlatforms_Handler,
		},
		{
			MethodName: "CreatePlatform",
			Handler:    _PlatformService_CreatePlatform_Handler,
		},
		{
			MethodName: "UpdatePlatform",
			Handler:    _PlatformService_UpdatePlatform_Handler,
		},
		{
			MethodName: "DeletePlatform",
			Handler:    _PlatformService_DeletePlatform_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/platform.proto",
}
