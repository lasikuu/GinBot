// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.29.2
// source: proto/trigger.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message representing a Trigger
type Trigger struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Trigger
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Phrase to trigger the response
	Phrase *string `protobuf:"bytes,2,opt,name=phrase" json:"phrase,omitempty"`
	// Reply to send in response to the trigger
	Reply *string `protobuf:"bytes,3,opt,name=reply" json:"reply,omitempty"`
	// File to send in response to the trigger
	Filename *string `protobuf:"bytes,4,opt,name=filename" json:"filename,omitempty"`
	// User ID of the creator
	UserId *int64 `protobuf:"varint,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// Platform to trigger the response
	PlatformConfig *TriggerPlatformConfig `protobuf:"bytes,6,opt,name=platform_config,json=platformConfig" json:"platform_config,omitempty"`
	// Chance of the trigger to be triggered
	Chance *int32 `protobuf:"varint,7,opt,name=chance" json:"chance,omitempty"`
	// Created at
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	// Updated at
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Trigger) Reset() {
	*x = Trigger{}
	mi := &file_proto_trigger_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger) ProtoMessage() {}

func (x *Trigger) ProtoReflect() protoreflect.Message {
	mi := &file_proto_trigger_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger.ProtoReflect.Descriptor instead.
func (*Trigger) Descriptor() ([]byte, []int) {
	return file_proto_trigger_proto_rawDescGZIP(), []int{0}
}

func (x *Trigger) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Trigger) GetPhrase() string {
	if x != nil && x.Phrase != nil {
		return *x.Phrase
	}
	return ""
}

func (x *Trigger) GetReply() string {
	if x != nil && x.Reply != nil {
		return *x.Reply
	}
	return ""
}

func (x *Trigger) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *Trigger) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *Trigger) GetPlatformConfig() *TriggerPlatformConfig {
	if x != nil {
		return x.PlatformConfig
	}
	return nil
}

func (x *Trigger) GetChance() int32 {
	if x != nil && x.Chance != nil {
		return *x.Chance
	}
	return 0
}

func (x *Trigger) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Trigger) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type TriggerPlatformConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Platform type
	Platform *Platform `protobuf:"varint,1,opt,name=platform,enum=ginbot.common.Platform" json:"platform,omitempty"`
	// Required information for the platform
	//
	// Types that are valid to be assigned to OneofPlatform:
	//
	//	*TriggerPlatformConfig_DiscordServerId
	//	*TriggerPlatformConfig_MatrixRoomId
	OneofPlatform isTriggerPlatformConfig_OneofPlatform `protobuf_oneof:"oneof_platform"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TriggerPlatformConfig) Reset() {
	*x = TriggerPlatformConfig{}
	mi := &file_proto_trigger_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerPlatformConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerPlatformConfig) ProtoMessage() {}

func (x *TriggerPlatformConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_trigger_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerPlatformConfig.ProtoReflect.Descriptor instead.
func (*TriggerPlatformConfig) Descriptor() ([]byte, []int) {
	return file_proto_trigger_proto_rawDescGZIP(), []int{1}
}

func (x *TriggerPlatformConfig) GetPlatform() Platform {
	if x != nil && x.Platform != nil {
		return *x.Platform
	}
	return Platform_Discord
}

func (x *TriggerPlatformConfig) GetOneofPlatform() isTriggerPlatformConfig_OneofPlatform {
	if x != nil {
		return x.OneofPlatform
	}
	return nil
}

func (x *TriggerPlatformConfig) GetDiscordServerId() int64 {
	if x != nil {
		if x, ok := x.OneofPlatform.(*TriggerPlatformConfig_DiscordServerId); ok {
			return x.DiscordServerId
		}
	}
	return 0
}

func (x *TriggerPlatformConfig) GetMatrixRoomId() string {
	if x != nil {
		if x, ok := x.OneofPlatform.(*TriggerPlatformConfig_MatrixRoomId); ok {
			return x.MatrixRoomId
		}
	}
	return ""
}

type isTriggerPlatformConfig_OneofPlatform interface {
	isTriggerPlatformConfig_OneofPlatform()
}

type TriggerPlatformConfig_DiscordServerId struct {
	DiscordServerId int64 `protobuf:"varint,2,opt,name=discord_server_id,json=discordServerId,oneof"`
}

type TriggerPlatformConfig_MatrixRoomId struct {
	MatrixRoomId string `protobuf:"bytes,3,opt,name=matrix_room_id,json=matrixRoomId,oneof"`
}

func (*TriggerPlatformConfig_DiscordServerId) isTriggerPlatformConfig_OneofPlatform() {}

func (*TriggerPlatformConfig_MatrixRoomId) isTriggerPlatformConfig_OneofPlatform() {}

type TryTriggerReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Platform to trigger the response
	PlatformConfig *TriggerPlatformConfig `protobuf:"bytes,1,opt,name=platform_config,json=platformConfig" json:"platform_config,omitempty"`
	// Phrase to trigger the response
	Phrase *string `protobuf:"bytes,2,opt,name=phrase" json:"phrase,omitempty"`
	// User ID of the triggerer
	UserId        *int64 `protobuf:"varint,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TryTriggerReq) Reset() {
	*x = TryTriggerReq{}
	mi := &file_proto_trigger_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TryTriggerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryTriggerReq) ProtoMessage() {}

func (x *TryTriggerReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_trigger_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryTriggerReq.ProtoReflect.Descriptor instead.
func (*TryTriggerReq) Descriptor() ([]byte, []int) {
	return file_proto_trigger_proto_rawDescGZIP(), []int{2}
}

func (x *TryTriggerReq) GetPlatformConfig() *TriggerPlatformConfig {
	if x != nil {
		return x.PlatformConfig
	}
	return nil
}

func (x *TryTriggerReq) GetPhrase() string {
	if x != nil && x.Phrase != nil {
		return *x.Phrase
	}
	return ""
}

func (x *TryTriggerReq) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

type TryTriggerResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Trigger
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Types that are valid to be assigned to OneofReply:
	//
	//	*TryTriggerResp_Reply
	//	*TryTriggerResp_Filename
	OneofReply    isTryTriggerResp_OneofReply `protobuf_oneof:"oneof_reply"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TryTriggerResp) Reset() {
	*x = TryTriggerResp{}
	mi := &file_proto_trigger_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TryTriggerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TryTriggerResp) ProtoMessage() {}

func (x *TryTriggerResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_trigger_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TryTriggerResp.ProtoReflect.Descriptor instead.
func (*TryTriggerResp) Descriptor() ([]byte, []int) {
	return file_proto_trigger_proto_rawDescGZIP(), []int{3}
}

func (x *TryTriggerResp) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *TryTriggerResp) GetOneofReply() isTryTriggerResp_OneofReply {
	if x != nil {
		return x.OneofReply
	}
	return nil
}

func (x *TryTriggerResp) GetReply() string {
	if x != nil {
		if x, ok := x.OneofReply.(*TryTriggerResp_Reply); ok {
			return x.Reply
		}
	}
	return ""
}

func (x *TryTriggerResp) GetFilename() string {
	if x != nil {
		if x, ok := x.OneofReply.(*TryTriggerResp_Filename); ok {
			return x.Filename
		}
	}
	return ""
}

type isTryTriggerResp_OneofReply interface {
	isTryTriggerResp_OneofReply()
}

type TryTriggerResp_Reply struct {
	// Reply to send in response to the trigger
	Reply string `protobuf:"bytes,2,opt,name=reply,oneof"`
}

type TryTriggerResp_Filename struct {
	// File to send in response to the trigger
	Filename string `protobuf:"bytes,3,opt,name=filename,oneof"`
}

func (*TryTriggerResp_Reply) isTryTriggerResp_OneofReply() {}

func (*TryTriggerResp_Filename) isTryTriggerResp_OneofReply() {}

type GetTriggerReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Trigger
	Id            *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTriggerReq) Reset() {
	*x = GetTriggerReq{}
	mi := &file_proto_trigger_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTriggerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTriggerReq) ProtoMessage() {}

func (x *GetTriggerReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_trigger_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTriggerReq.ProtoReflect.Descriptor instead.
func (*GetTriggerReq) Descriptor() ([]byte, []int) {
	return file_proto_trigger_proto_rawDescGZIP(), []int{4}
}

func (x *GetTriggerReq) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type GetTriggerResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Trigger       *Trigger               `protobuf:"bytes,1,opt,name=trigger" json:"trigger,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTriggerResp) Reset() {
	*x = GetTriggerResp{}
	mi := &file_proto_trigger_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTriggerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTriggerResp) ProtoMessage() {}

func (x *GetTriggerResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_trigger_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTriggerResp.ProtoReflect.Descriptor instead.
func (*GetTriggerResp) Descriptor() ([]byte, []int) {
	return file_proto_trigger_proto_rawDescGZIP(), []int{5}
}

func (x *GetTriggerResp) GetTrigger() *Trigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

type ListTriggersReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Limit the number of triggers returned
	Limit *int64 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	// Offset the triggers returned
	Offset *int64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	// Search field for trigger phrases
	Phrase *string `protobuf:"bytes,3,opt,name=phrase" json:"phrase,omitempty"`
	// Search field for trigger replies
	Reply *string `protobuf:"bytes,4,opt,name=reply" json:"reply,omitempty"`
	// User ID of the creator
	UserId *int64 `protobuf:"varint,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// Platform to trigger the response
	PlatformConfig *TriggerPlatformConfig `protobuf:"bytes,6,opt,name=platform_config,json=platformConfig" json:"platform_config,omitempty"`
	// Search for triggers starting from this date
	PeriodStart *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=period_start,json=periodStart" json:"period_start,omitempty"`
	// Search for triggers ending at this date
	PeriodEnd     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=period_end,json=periodEnd" json:"period_end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTriggersReq) Reset() {
	*x = ListTriggersReq{}
	mi := &file_proto_trigger_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTriggersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTriggersReq) ProtoMessage() {}

func (x *ListTriggersReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_trigger_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTriggersReq.ProtoReflect.Descriptor instead.
func (*ListTriggersReq) Descriptor() ([]byte, []int) {
	return file_proto_trigger_proto_rawDescGZIP(), []int{6}
}

func (x *ListTriggersReq) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListTriggersReq) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *ListTriggersReq) GetPhrase() string {
	if x != nil && x.Phrase != nil {
		return *x.Phrase
	}
	return ""
}

func (x *ListTriggersReq) GetReply() string {
	if x != nil && x.Reply != nil {
		return *x.Reply
	}
	return ""
}

func (x *ListTriggersReq) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *ListTriggersReq) GetPlatformConfig() *TriggerPlatformConfig {
	if x != nil {
		return x.PlatformConfig
	}
	return nil
}

func (x *ListTriggersReq) GetPeriodStart() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodStart
	}
	return nil
}

func (x *ListTriggersReq) GetPeriodEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodEnd
	}
	return nil
}

type ListTriggersResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Triggers      []*Trigger             `protobuf:"bytes,1,rep,name=triggers" json:"triggers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTriggersResp) Reset() {
	*x = ListTriggersResp{}
	mi := &file_proto_trigger_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTriggersResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTriggersResp) ProtoMessage() {}

func (x *ListTriggersResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_trigger_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTriggersResp.ProtoReflect.Descriptor instead.
func (*ListTriggersResp) Descriptor() ([]byte, []int) {
	return file_proto_trigger_proto_rawDescGZIP(), []int{7}
}

func (x *ListTriggersResp) GetTriggers() []*Trigger {
	if x != nil {
		return x.Triggers
	}
	return nil
}

type CreateTriggerReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Phrase to trigger the response
	Phrase *string `protobuf:"bytes,1,opt,name=phrase" json:"phrase,omitempty"`
	// Reply to send in response to the trigger
	Reply *string `protobuf:"bytes,2,opt,name=reply" json:"reply,omitempty"`
	// File to send in response to the trigger
	Filename *string `protobuf:"bytes,3,opt,name=filename" json:"filename,omitempty"`
	// User ID of the creator
	UserId *int64 `protobuf:"varint,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// Platform to trigger the response
	PlatformConfig *TriggerPlatformConfig `protobuf:"bytes,5,opt,name=platform_config,json=platformConfig" json:"platform_config,omitempty"`
	// Chance of the trigger to be triggered
	Chance        *int32 `protobuf:"varint,6,opt,name=chance" json:"chance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTriggerReq) Reset() {
	*x = CreateTriggerReq{}
	mi := &file_proto_trigger_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTriggerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTriggerReq) ProtoMessage() {}

func (x *CreateTriggerReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_trigger_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTriggerReq.ProtoReflect.Descriptor instead.
func (*CreateTriggerReq) Descriptor() ([]byte, []int) {
	return file_proto_trigger_proto_rawDescGZIP(), []int{8}
}

func (x *CreateTriggerReq) GetPhrase() string {
	if x != nil && x.Phrase != nil {
		return *x.Phrase
	}
	return ""
}

func (x *CreateTriggerReq) GetReply() string {
	if x != nil && x.Reply != nil {
		return *x.Reply
	}
	return ""
}

func (x *CreateTriggerReq) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *CreateTriggerReq) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *CreateTriggerReq) GetPlatformConfig() *TriggerPlatformConfig {
	if x != nil {
		return x.PlatformConfig
	}
	return nil
}

func (x *CreateTriggerReq) GetChance() int32 {
	if x != nil && x.Chance != nil {
		return *x.Chance
	}
	return 0
}

type CreateTriggerResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Trigger       *Trigger               `protobuf:"bytes,1,opt,name=trigger" json:"trigger,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateTriggerResp) Reset() {
	*x = CreateTriggerResp{}
	mi := &file_proto_trigger_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateTriggerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTriggerResp) ProtoMessage() {}

func (x *CreateTriggerResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_trigger_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTriggerResp.ProtoReflect.Descriptor instead.
func (*CreateTriggerResp) Descriptor() ([]byte, []int) {
	return file_proto_trigger_proto_rawDescGZIP(), []int{9}
}

func (x *CreateTriggerResp) GetTrigger() *Trigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

type ModifyTriggerReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Trigger
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Phrase to trigger the response
	Phrase *string `protobuf:"bytes,2,opt,name=phrase" json:"phrase,omitempty"`
	// Reply to send in response to the trigger
	Reply *string `protobuf:"bytes,3,opt,name=reply" json:"reply,omitempty"`
	// File to send in response to the trigger
	Filename *string `protobuf:"bytes,4,opt,name=filename" json:"filename,omitempty"`
	// User ID of the creator
	UserId *int64 `protobuf:"varint,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// Chance of the trigger to be triggered
	Chance        *int32 `protobuf:"varint,7,opt,name=chance" json:"chance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModifyTriggerReq) Reset() {
	*x = ModifyTriggerReq{}
	mi := &file_proto_trigger_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyTriggerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyTriggerReq) ProtoMessage() {}

func (x *ModifyTriggerReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_trigger_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyTriggerReq.ProtoReflect.Descriptor instead.
func (*ModifyTriggerReq) Descriptor() ([]byte, []int) {
	return file_proto_trigger_proto_rawDescGZIP(), []int{10}
}

func (x *ModifyTriggerReq) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ModifyTriggerReq) GetPhrase() string {
	if x != nil && x.Phrase != nil {
		return *x.Phrase
	}
	return ""
}

func (x *ModifyTriggerReq) GetReply() string {
	if x != nil && x.Reply != nil {
		return *x.Reply
	}
	return ""
}

func (x *ModifyTriggerReq) GetFilename() string {
	if x != nil && x.Filename != nil {
		return *x.Filename
	}
	return ""
}

func (x *ModifyTriggerReq) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *ModifyTriggerReq) GetChance() int32 {
	if x != nil && x.Chance != nil {
		return *x.Chance
	}
	return 0
}

type ModifyTriggerResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Trigger       *Trigger               `protobuf:"bytes,1,opt,name=trigger" json:"trigger,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModifyTriggerResp) Reset() {
	*x = ModifyTriggerResp{}
	mi := &file_proto_trigger_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModifyTriggerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModifyTriggerResp) ProtoMessage() {}

func (x *ModifyTriggerResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_trigger_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModifyTriggerResp.ProtoReflect.Descriptor instead.
func (*ModifyTriggerResp) Descriptor() ([]byte, []int) {
	return file_proto_trigger_proto_rawDescGZIP(), []int{11}
}

func (x *ModifyTriggerResp) GetTrigger() *Trigger {
	if x != nil {
		return x.Trigger
	}
	return nil
}

type DeleteTriggerReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Trigger
	Id            *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTriggerReq) Reset() {
	*x = DeleteTriggerReq{}
	mi := &file_proto_trigger_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTriggerReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTriggerReq) ProtoMessage() {}

func (x *DeleteTriggerReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_trigger_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTriggerReq.ProtoReflect.Descriptor instead.
func (*DeleteTriggerReq) Descriptor() ([]byte, []int) {
	return file_proto_trigger_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteTriggerReq) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type DeleteTriggerResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       *bool                  `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteTriggerResp) Reset() {
	*x = DeleteTriggerResp{}
	mi := &file_proto_trigger_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteTriggerResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTriggerResp) ProtoMessage() {}

func (x *DeleteTriggerResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_trigger_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTriggerResp.ProtoReflect.Descriptor instead.
func (*DeleteTriggerResp) Descriptor() ([]byte, []int) {
	return file_proto_trigger_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteTriggerResp) GetSuccess() bool {
	if x != nil && x.Success != nil {
		return *x.Success
	}
	return false
}

var File_proto_trigger_proto protoreflect.FileDescriptor

var file_proto_trigger_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xda, 0x02, 0x0a, 0x07, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x15, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x33, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72,
	0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x5f, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c,
	0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x52, 0x6f, 0x6f, 0x6d, 0x49, 0x64, 0x42, 0x10, 0x0a, 0x0e,
	0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x90,
	0x01, 0x0a, 0x0d, 0x54, 0x72, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x12, 0x4e, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x69, 0x6e, 0x62,
	0x6f, 0x74, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x65, 0x0a, 0x0e, 0x54, 0x72, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1f, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x43, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x07, 0x74,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x22, 0xd0,
	0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e,
	0x64, 0x22, 0x47, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x52, 0x08, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x10, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x46, 0x0a, 0x11, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x31, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x22, 0x9d, 0x01, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0x46, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f,
	0x74, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x52, 0x07, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x22, 0x22, 0x0a, 0x10, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2d,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x32, 0xff, 0x03,
	0x0a, 0x0e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x4b, 0x0a, 0x0a, 0x54, 0x72, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1d,
	0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e,
	0x54, 0x72, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e,
	0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x54,
	0x72, 0x79, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x67, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x67, 0x69, 0x6e,
	0x62, 0x6f, 0x74, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0c, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x2e, 0x67, 0x69, 0x6e,
	0x62, 0x6f, 0x74, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x67, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a,
	0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x20,
	0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x21, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x0d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x67, 0x69, 0x6e,
	0x62, 0x6f, 0x74, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x67,
	0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x42,
	0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x72,
	0x65, 0x73, 0x63, 0x65, 0x6e, 0x74, 0x4b, 0x6f, 0x68, 0x61, 0x6e, 0x61, 0x2f, 0x47, 0x69, 0x6e,
	0x42, 0x6f, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x08, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0xe8, 0x07,
}

var (
	file_proto_trigger_proto_rawDescOnce sync.Once
	file_proto_trigger_proto_rawDescData = file_proto_trigger_proto_rawDesc
)

func file_proto_trigger_proto_rawDescGZIP() []byte {
	file_proto_trigger_proto_rawDescOnce.Do(func() {
		file_proto_trigger_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_trigger_proto_rawDescData)
	})
	return file_proto_trigger_proto_rawDescData
}

var file_proto_trigger_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_proto_trigger_proto_goTypes = []any{
	(*Trigger)(nil),               // 0: ginbot.trigger.Trigger
	(*TriggerPlatformConfig)(nil), // 1: ginbot.trigger.TriggerPlatformConfig
	(*TryTriggerReq)(nil),         // 2: ginbot.trigger.TryTriggerReq
	(*TryTriggerResp)(nil),        // 3: ginbot.trigger.TryTriggerResp
	(*GetTriggerReq)(nil),         // 4: ginbot.trigger.GetTriggerReq
	(*GetTriggerResp)(nil),        // 5: ginbot.trigger.GetTriggerResp
	(*ListTriggersReq)(nil),       // 6: ginbot.trigger.ListTriggersReq
	(*ListTriggersResp)(nil),      // 7: ginbot.trigger.ListTriggersResp
	(*CreateTriggerReq)(nil),      // 8: ginbot.trigger.CreateTriggerReq
	(*CreateTriggerResp)(nil),     // 9: ginbot.trigger.CreateTriggerResp
	(*ModifyTriggerReq)(nil),      // 10: ginbot.trigger.ModifyTriggerReq
	(*ModifyTriggerResp)(nil),     // 11: ginbot.trigger.ModifyTriggerResp
	(*DeleteTriggerReq)(nil),      // 12: ginbot.trigger.DeleteTriggerReq
	(*DeleteTriggerResp)(nil),     // 13: ginbot.trigger.DeleteTriggerResp
	(*timestamppb.Timestamp)(nil), // 14: google.protobuf.Timestamp
	(Platform)(0),                 // 15: ginbot.common.Platform
}
var file_proto_trigger_proto_depIdxs = []int32{
	1,  // 0: ginbot.trigger.Trigger.platform_config:type_name -> ginbot.trigger.TriggerPlatformConfig
	14, // 1: ginbot.trigger.Trigger.created_at:type_name -> google.protobuf.Timestamp
	14, // 2: ginbot.trigger.Trigger.updated_at:type_name -> google.protobuf.Timestamp
	15, // 3: ginbot.trigger.TriggerPlatformConfig.platform:type_name -> ginbot.common.Platform
	1,  // 4: ginbot.trigger.TryTriggerReq.platform_config:type_name -> ginbot.trigger.TriggerPlatformConfig
	0,  // 5: ginbot.trigger.GetTriggerResp.trigger:type_name -> ginbot.trigger.Trigger
	1,  // 6: ginbot.trigger.ListTriggersReq.platform_config:type_name -> ginbot.trigger.TriggerPlatformConfig
	14, // 7: ginbot.trigger.ListTriggersReq.period_start:type_name -> google.protobuf.Timestamp
	14, // 8: ginbot.trigger.ListTriggersReq.period_end:type_name -> google.protobuf.Timestamp
	0,  // 9: ginbot.trigger.ListTriggersResp.triggers:type_name -> ginbot.trigger.Trigger
	1,  // 10: ginbot.trigger.CreateTriggerReq.platform_config:type_name -> ginbot.trigger.TriggerPlatformConfig
	0,  // 11: ginbot.trigger.CreateTriggerResp.trigger:type_name -> ginbot.trigger.Trigger
	0,  // 12: ginbot.trigger.ModifyTriggerResp.trigger:type_name -> ginbot.trigger.Trigger
	2,  // 13: ginbot.trigger.TriggerService.TryTrigger:input_type -> ginbot.trigger.TryTriggerReq
	4,  // 14: ginbot.trigger.TriggerService.GetTrigger:input_type -> ginbot.trigger.GetTriggerReq
	6,  // 15: ginbot.trigger.TriggerService.ListTriggers:input_type -> ginbot.trigger.ListTriggersReq
	8,  // 16: ginbot.trigger.TriggerService.CreateTrigger:input_type -> ginbot.trigger.CreateTriggerReq
	10, // 17: ginbot.trigger.TriggerService.ModifyTrigger:input_type -> ginbot.trigger.ModifyTriggerReq
	12, // 18: ginbot.trigger.TriggerService.DeleteTrigger:input_type -> ginbot.trigger.DeleteTriggerReq
	3,  // 19: ginbot.trigger.TriggerService.TryTrigger:output_type -> ginbot.trigger.TryTriggerResp
	5,  // 20: ginbot.trigger.TriggerService.GetTrigger:output_type -> ginbot.trigger.GetTriggerResp
	7,  // 21: ginbot.trigger.TriggerService.ListTriggers:output_type -> ginbot.trigger.ListTriggersResp
	9,  // 22: ginbot.trigger.TriggerService.CreateTrigger:output_type -> ginbot.trigger.CreateTriggerResp
	11, // 23: ginbot.trigger.TriggerService.ModifyTrigger:output_type -> ginbot.trigger.ModifyTriggerResp
	13, // 24: ginbot.trigger.TriggerService.DeleteTrigger:output_type -> ginbot.trigger.DeleteTriggerResp
	19, // [19:25] is the sub-list for method output_type
	13, // [13:19] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_proto_trigger_proto_init() }
func file_proto_trigger_proto_init() {
	if File_proto_trigger_proto != nil {
		return
	}
	file_proto_common_proto_init()
	file_proto_trigger_proto_msgTypes[1].OneofWrappers = []any{
		(*TriggerPlatformConfig_DiscordServerId)(nil),
		(*TriggerPlatformConfig_MatrixRoomId)(nil),
	}
	file_proto_trigger_proto_msgTypes[3].OneofWrappers = []any{
		(*TryTriggerResp_Reply)(nil),
		(*TryTriggerResp_Filename)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_trigger_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_trigger_proto_goTypes,
		DependencyIndexes: file_proto_trigger_proto_depIdxs,
		MessageInfos:      file_proto_trigger_proto_msgTypes,
	}.Build()
	File_proto_trigger_proto = out.File
	file_proto_trigger_proto_rawDesc = nil
	file_proto_trigger_proto_goTypes = nil
	file_proto_trigger_proto_depIdxs = nil
}
