// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.29.2
// source: proto/reminder.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReminderStatus int32

const (
	ReminderStatus_PENDING   ReminderStatus = 0
	ReminderStatus_SENT      ReminderStatus = 1
	ReminderStatus_DELIVERED ReminderStatus = 2
	ReminderStatus_FAILED    ReminderStatus = 3
)

// Enum value maps for ReminderStatus.
var (
	ReminderStatus_name = map[int32]string{
		0: "PENDING",
		1: "SENT",
		2: "DELIVERED",
		3: "FAILED",
	}
	ReminderStatus_value = map[string]int32{
		"PENDING":   0,
		"SENT":      1,
		"DELIVERED": 2,
		"FAILED":    3,
	}
)

func (x ReminderStatus) Enum() *ReminderStatus {
	p := new(ReminderStatus)
	*p = x
	return p
}

func (x ReminderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReminderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_reminder_proto_enumTypes[0].Descriptor()
}

func (ReminderStatus) Type() protoreflect.EnumType {
	return &file_proto_reminder_proto_enumTypes[0]
}

func (x ReminderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReminderStatus.Descriptor instead.
func (ReminderStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_reminder_proto_rawDescGZIP(), []int{0}
}

// Message representing a Reminder
type Reminder struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Reminder
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Date and time of the Reminder (UTC+0)
	Datetime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=datetime" json:"datetime,omitempty"`
	// Timezone of the Reminder
	Timezone *string `protobuf:"bytes,3,opt,name=timezone" json:"timezone,omitempty"`
	// Repeat in cron format
	RepeatCron *string `protobuf:"bytes,4,opt,name=repeat_cron,json=repeatCron" json:"repeat_cron,omitempty"`
	// Destinations to send the reminder to
	Destination *ReminderDestination `protobuf:"bytes,5,opt,name=destination" json:"destination,omitempty"`
	// Status of the Reminder
	Status *ReminderStatus `protobuf:"varint,6,opt,name=status,enum=ginbot.reminder.ReminderStatus" json:"status,omitempty"`
	// User ID of the creator
	UserId *int64 `protobuf:"varint,7,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// Reminder message
	Message *string `protobuf:"bytes,8,opt,name=message" json:"message,omitempty"`
	// Parent reminder ID
	ParentId *int64 `protobuf:"varint,9,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	// Created at
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	// Updated at
	UpdatedAt     *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Reminder) Reset() {
	*x = Reminder{}
	mi := &file_proto_reminder_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Reminder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reminder) ProtoMessage() {}

func (x *Reminder) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reminder_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reminder.ProtoReflect.Descriptor instead.
func (*Reminder) Descriptor() ([]byte, []int) {
	return file_proto_reminder_proto_rawDescGZIP(), []int{0}
}

func (x *Reminder) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Reminder) GetDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.Datetime
	}
	return nil
}

func (x *Reminder) GetTimezone() string {
	if x != nil && x.Timezone != nil {
		return *x.Timezone
	}
	return ""
}

func (x *Reminder) GetRepeatCron() string {
	if x != nil && x.RepeatCron != nil {
		return *x.RepeatCron
	}
	return ""
}

func (x *Reminder) GetDestination() *ReminderDestination {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *Reminder) GetStatus() ReminderStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ReminderStatus_PENDING
}

func (x *Reminder) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *Reminder) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *Reminder) GetParentId() int64 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

func (x *Reminder) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Reminder) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// Destination to send the reminder to
type ReminderDestination struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Platform to send the reminder to
	PlatformEnum *PlatformEnum `protobuf:"varint,1,opt,name=platform_enum,json=platformEnum,enum=ginbot.common.PlatformEnum" json:"platform_enum,omitempty"`
	// Platform meta information such as Server ID, Channel ID etc.
	PlatformMeta  *structpb.Struct `protobuf:"bytes,2,opt,name=platform_meta,json=platformMeta" json:"platform_meta,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReminderDestination) Reset() {
	*x = ReminderDestination{}
	mi := &file_proto_reminder_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReminderDestination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReminderDestination) ProtoMessage() {}

func (x *ReminderDestination) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reminder_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReminderDestination.ProtoReflect.Descriptor instead.
func (*ReminderDestination) Descriptor() ([]byte, []int) {
	return file_proto_reminder_proto_rawDescGZIP(), []int{1}
}

func (x *ReminderDestination) GetPlatformEnum() PlatformEnum {
	if x != nil && x.PlatformEnum != nil {
		return *x.PlatformEnum
	}
	return PlatformEnum_UNKNOWN
}

func (x *ReminderDestination) GetPlatformMeta() *structpb.Struct {
	if x != nil {
		return x.PlatformMeta
	}
	return nil
}

type GetReminderReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Reminder
	Id            *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetReminderReq) Reset() {
	*x = GetReminderReq{}
	mi := &file_proto_reminder_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReminderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReminderReq) ProtoMessage() {}

func (x *GetReminderReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reminder_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReminderReq.ProtoReflect.Descriptor instead.
func (*GetReminderReq) Descriptor() ([]byte, []int) {
	return file_proto_reminder_proto_rawDescGZIP(), []int{2}
}

func (x *GetReminderReq) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type GetReminderResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reminder      *Reminder              `protobuf:"bytes,1,opt,name=reminder" json:"reminder,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetReminderResp) Reset() {
	*x = GetReminderResp{}
	mi := &file_proto_reminder_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetReminderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReminderResp) ProtoMessage() {}

func (x *GetReminderResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reminder_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReminderResp.ProtoReflect.Descriptor instead.
func (*GetReminderResp) Descriptor() ([]byte, []int) {
	return file_proto_reminder_proto_rawDescGZIP(), []int{3}
}

func (x *GetReminderResp) GetReminder() *Reminder {
	if x != nil {
		return x.Reminder
	}
	return nil
}

type ListRemindersReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Limit the number of reminders returned
	Limit *int64 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	// Offset the reminders returned
	Offset *int64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	// Search field for reminders
	Message *string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	// User ID of the creator
	UserId *int64 `protobuf:"varint,4,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// Search for reminders starting from this date
	PeriodStart *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=period_start,json=periodStart" json:"period_start,omitempty"`
	// Search for reminders ending at this date
	PeriodEnd *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=period_end,json=periodEnd" json:"period_end,omitempty"`
	// Search for reminders with this status
	Status        *ReminderStatus `protobuf:"varint,7,opt,name=status,enum=ginbot.reminder.ReminderStatus" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRemindersReq) Reset() {
	*x = ListRemindersReq{}
	mi := &file_proto_reminder_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRemindersReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRemindersReq) ProtoMessage() {}

func (x *ListRemindersReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reminder_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRemindersReq.ProtoReflect.Descriptor instead.
func (*ListRemindersReq) Descriptor() ([]byte, []int) {
	return file_proto_reminder_proto_rawDescGZIP(), []int{4}
}

func (x *ListRemindersReq) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

func (x *ListRemindersReq) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *ListRemindersReq) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *ListRemindersReq) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *ListRemindersReq) GetPeriodStart() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodStart
	}
	return nil
}

func (x *ListRemindersReq) GetPeriodEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodEnd
	}
	return nil
}

func (x *ListRemindersReq) GetStatus() ReminderStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ReminderStatus_PENDING
}

type ListRemindersResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reminders     []*Reminder            `protobuf:"bytes,1,rep,name=reminders" json:"reminders,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRemindersResp) Reset() {
	*x = ListRemindersResp{}
	mi := &file_proto_reminder_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRemindersResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRemindersResp) ProtoMessage() {}

func (x *ListRemindersResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reminder_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRemindersResp.ProtoReflect.Descriptor instead.
func (*ListRemindersResp) Descriptor() ([]byte, []int) {
	return file_proto_reminder_proto_rawDescGZIP(), []int{5}
}

func (x *ListRemindersResp) GetReminders() []*Reminder {
	if x != nil {
		return x.Reminders
	}
	return nil
}

type CreateReminderReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Date and time of the Reminder (UTC+0)
	Datetime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=datetime" json:"datetime,omitempty"`
	// Timezone of the Reminder
	Timezone *string `protobuf:"bytes,3,opt,name=timezone" json:"timezone,omitempty"`
	// Reminder message
	Message *string `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	// User ID of the creator
	UserId *int64 `protobuf:"varint,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// Destinations to send the reminder to
	Destination *ReminderDestination `protobuf:"bytes,6,opt,name=destination" json:"destination,omitempty"`
	// Repeat in cron format
	RepeatCron *string `protobuf:"bytes,7,opt,name=repeat_cron,json=repeatCron" json:"repeat_cron,omitempty"`
	// Parent reminder ID
	ParentId      *int64 `protobuf:"varint,8,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateReminderReq) Reset() {
	*x = CreateReminderReq{}
	mi := &file_proto_reminder_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReminderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReminderReq) ProtoMessage() {}

func (x *CreateReminderReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reminder_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReminderReq.ProtoReflect.Descriptor instead.
func (*CreateReminderReq) Descriptor() ([]byte, []int) {
	return file_proto_reminder_proto_rawDescGZIP(), []int{6}
}

func (x *CreateReminderReq) GetDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.Datetime
	}
	return nil
}

func (x *CreateReminderReq) GetTimezone() string {
	if x != nil && x.Timezone != nil {
		return *x.Timezone
	}
	return ""
}

func (x *CreateReminderReq) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *CreateReminderReq) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *CreateReminderReq) GetDestination() *ReminderDestination {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *CreateReminderReq) GetRepeatCron() string {
	if x != nil && x.RepeatCron != nil {
		return *x.RepeatCron
	}
	return ""
}

func (x *CreateReminderReq) GetParentId() int64 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

type CreateReminderResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Reminder
	Id            *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateReminderResp) Reset() {
	*x = CreateReminderResp{}
	mi := &file_proto_reminder_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateReminderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReminderResp) ProtoMessage() {}

func (x *CreateReminderResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reminder_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReminderResp.ProtoReflect.Descriptor instead.
func (*CreateReminderResp) Descriptor() ([]byte, []int) {
	return file_proto_reminder_proto_rawDescGZIP(), []int{7}
}

func (x *CreateReminderResp) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type UpdateReminderReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the Reminder
	Id *int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Date and time of the Reminder (UTC+0)
	Datetime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=datetime" json:"datetime,omitempty"`
	// Timezone of the Reminder
	Timezone *string `protobuf:"bytes,3,opt,name=timezone" json:"timezone,omitempty"`
	// Reminder message
	Message *string `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	// User ID of the creator
	UserId *int64 `protobuf:"varint,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// Destinations to send the reminder to
	Destination *ReminderDestination `protobuf:"bytes,6,opt,name=destination" json:"destination,omitempty"`
	// Repeat in cron format
	RepeatCron *string `protobuf:"bytes,7,opt,name=repeat_cron,json=repeatCron" json:"repeat_cron,omitempty"`
	// Parent reminder ID
	ParentId      *int64 `protobuf:"varint,8,opt,name=parent_id,json=parentId" json:"parent_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateReminderReq) Reset() {
	*x = UpdateReminderReq{}
	mi := &file_proto_reminder_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateReminderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReminderReq) ProtoMessage() {}

func (x *UpdateReminderReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reminder_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReminderReq.ProtoReflect.Descriptor instead.
func (*UpdateReminderReq) Descriptor() ([]byte, []int) {
	return file_proto_reminder_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateReminderReq) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *UpdateReminderReq) GetDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.Datetime
	}
	return nil
}

func (x *UpdateReminderReq) GetTimezone() string {
	if x != nil && x.Timezone != nil {
		return *x.Timezone
	}
	return ""
}

func (x *UpdateReminderReq) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *UpdateReminderReq) GetUserId() int64 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *UpdateReminderReq) GetDestination() *ReminderDestination {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *UpdateReminderReq) GetRepeatCron() string {
	if x != nil && x.RepeatCron != nil {
		return *x.RepeatCron
	}
	return ""
}

func (x *UpdateReminderReq) GetParentId() int64 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

type DeleteReminderReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            *int64                 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteReminderReq) Reset() {
	*x = DeleteReminderReq{}
	mi := &file_proto_reminder_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteReminderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReminderReq) ProtoMessage() {}

func (x *DeleteReminderReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reminder_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReminderReq.ProtoReflect.Descriptor instead.
func (*DeleteReminderReq) Descriptor() ([]byte, []int) {
	return file_proto_reminder_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteReminderReq) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

type GetExpiredRemindersResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reminders     []*Reminder            `protobuf:"bytes,1,rep,name=reminders" json:"reminders,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetExpiredRemindersResp) Reset() {
	*x = GetExpiredRemindersResp{}
	mi := &file_proto_reminder_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExpiredRemindersResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExpiredRemindersResp) ProtoMessage() {}

func (x *GetExpiredRemindersResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_reminder_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExpiredRemindersResp.ProtoReflect.Descriptor instead.
func (*GetExpiredRemindersResp) Descriptor() ([]byte, []int) {
	return file_proto_reminder_proto_rawDescGZIP(), []int{10}
}

func (x *GetExpiredRemindersResp) GetReminders() []*Reminder {
	if x != nil {
		return x.Reminders
	}
	return nil
}

var File_proto_reminder_proto protoreflect.FileDescriptor

var file_proto_reminder_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72,
	0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6, 0x03, 0x0a, 0x08, 0x52, 0x65, 0x6d, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x5f, 0x63, 0x72, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0x95, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0c, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x3c, 0x0a, 0x0d, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a,
	0x08, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x08, 0x72, 0x65, 0x6d, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x22, 0xa6, 0x02, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x45, 0x6e, 0x64, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x65,
	0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4c, 0x0a,
	0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72,
	0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x52, 0x09, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x22, 0xa0, 0x02, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x46, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x2e,
	0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x72, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x43, 0x72, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x24,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x22, 0xb0, 0x02, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x46, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e,
	0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x5f, 0x63, 0x72, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x43, 0x72, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x23, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x69, 0x6e,
	0x64, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x69, 0x6e,
	0x62, 0x6f, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x73,
	0x2a, 0x42, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x45, 0x4c,
	0x49, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x03, 0x32, 0x8b, 0x04, 0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74,
	0x2e, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f,
	0x74, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x56, 0x0a, 0x0d, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x67, 0x69,
	0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x22,
	0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x59, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x65,
	0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f,
	0x74, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a,
	0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x22, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65,
	0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x0e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x22, 0x2e,
	0x67, 0x69, 0x6e, 0x62, 0x6f, 0x74, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x57, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x28, 0x2e, 0x67, 0x69, 0x6e, 0x62, 0x6f,
	0x74, 0x2e, 0x72, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x52, 0x65, 0x6d, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x43, 0x72, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x74, 0x4b, 0x6f, 0x68, 0x61, 0x6e, 0x61, 0x2f,
	0x47, 0x69, 0x6e, 0x42, 0x6f, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x08, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x70, 0xe8,
	0x07,
}

var (
	file_proto_reminder_proto_rawDescOnce sync.Once
	file_proto_reminder_proto_rawDescData = file_proto_reminder_proto_rawDesc
)

func file_proto_reminder_proto_rawDescGZIP() []byte {
	file_proto_reminder_proto_rawDescOnce.Do(func() {
		file_proto_reminder_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_reminder_proto_rawDescData)
	})
	return file_proto_reminder_proto_rawDescData
}

var file_proto_reminder_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_reminder_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_proto_reminder_proto_goTypes = []any{
	(ReminderStatus)(0),             // 0: ginbot.reminder.ReminderStatus
	(*Reminder)(nil),                // 1: ginbot.reminder.Reminder
	(*ReminderDestination)(nil),     // 2: ginbot.reminder.ReminderDestination
	(*GetReminderReq)(nil),          // 3: ginbot.reminder.GetReminderReq
	(*GetReminderResp)(nil),         // 4: ginbot.reminder.GetReminderResp
	(*ListRemindersReq)(nil),        // 5: ginbot.reminder.ListRemindersReq
	(*ListRemindersResp)(nil),       // 6: ginbot.reminder.ListRemindersResp
	(*CreateReminderReq)(nil),       // 7: ginbot.reminder.CreateReminderReq
	(*CreateReminderResp)(nil),      // 8: ginbot.reminder.CreateReminderResp
	(*UpdateReminderReq)(nil),       // 9: ginbot.reminder.UpdateReminderReq
	(*DeleteReminderReq)(nil),       // 10: ginbot.reminder.DeleteReminderReq
	(*GetExpiredRemindersResp)(nil), // 11: ginbot.reminder.GetExpiredRemindersResp
	(*timestamppb.Timestamp)(nil),   // 12: google.protobuf.Timestamp
	(PlatformEnum)(0),               // 13: ginbot.common.PlatformEnum
	(*structpb.Struct)(nil),         // 14: google.protobuf.Struct
	(*emptypb.Empty)(nil),           // 15: google.protobuf.Empty
}
var file_proto_reminder_proto_depIdxs = []int32{
	12, // 0: ginbot.reminder.Reminder.datetime:type_name -> google.protobuf.Timestamp
	2,  // 1: ginbot.reminder.Reminder.destination:type_name -> ginbot.reminder.ReminderDestination
	0,  // 2: ginbot.reminder.Reminder.status:type_name -> ginbot.reminder.ReminderStatus
	12, // 3: ginbot.reminder.Reminder.created_at:type_name -> google.protobuf.Timestamp
	12, // 4: ginbot.reminder.Reminder.updated_at:type_name -> google.protobuf.Timestamp
	13, // 5: ginbot.reminder.ReminderDestination.platform_enum:type_name -> ginbot.common.PlatformEnum
	14, // 6: ginbot.reminder.ReminderDestination.platform_meta:type_name -> google.protobuf.Struct
	1,  // 7: ginbot.reminder.GetReminderResp.reminder:type_name -> ginbot.reminder.Reminder
	12, // 8: ginbot.reminder.ListRemindersReq.period_start:type_name -> google.protobuf.Timestamp
	12, // 9: ginbot.reminder.ListRemindersReq.period_end:type_name -> google.protobuf.Timestamp
	0,  // 10: ginbot.reminder.ListRemindersReq.status:type_name -> ginbot.reminder.ReminderStatus
	1,  // 11: ginbot.reminder.ListRemindersResp.reminders:type_name -> ginbot.reminder.Reminder
	12, // 12: ginbot.reminder.CreateReminderReq.datetime:type_name -> google.protobuf.Timestamp
	2,  // 13: ginbot.reminder.CreateReminderReq.destination:type_name -> ginbot.reminder.ReminderDestination
	12, // 14: ginbot.reminder.UpdateReminderReq.datetime:type_name -> google.protobuf.Timestamp
	2,  // 15: ginbot.reminder.UpdateReminderReq.destination:type_name -> ginbot.reminder.ReminderDestination
	1,  // 16: ginbot.reminder.GetExpiredRemindersResp.reminders:type_name -> ginbot.reminder.Reminder
	3,  // 17: ginbot.reminder.ReminderService.GetReminder:input_type -> ginbot.reminder.GetReminderReq
	5,  // 18: ginbot.reminder.ReminderService.ListReminders:input_type -> ginbot.reminder.ListRemindersReq
	7,  // 19: ginbot.reminder.ReminderService.CreateReminder:input_type -> ginbot.reminder.CreateReminderReq
	9,  // 20: ginbot.reminder.ReminderService.UpdateReminder:input_type -> ginbot.reminder.UpdateReminderReq
	10, // 21: ginbot.reminder.ReminderService.DeleteReminder:input_type -> ginbot.reminder.DeleteReminderReq
	15, // 22: ginbot.reminder.ReminderService.GetExpiredReminders:input_type -> google.protobuf.Empty
	4,  // 23: ginbot.reminder.ReminderService.GetReminder:output_type -> ginbot.reminder.GetReminderResp
	6,  // 24: ginbot.reminder.ReminderService.ListReminders:output_type -> ginbot.reminder.ListRemindersResp
	8,  // 25: ginbot.reminder.ReminderService.CreateReminder:output_type -> ginbot.reminder.CreateReminderResp
	15, // 26: ginbot.reminder.ReminderService.UpdateReminder:output_type -> google.protobuf.Empty
	15, // 27: ginbot.reminder.ReminderService.DeleteReminder:output_type -> google.protobuf.Empty
	11, // 28: ginbot.reminder.ReminderService.GetExpiredReminders:output_type -> ginbot.reminder.GetExpiredRemindersResp
	23, // [23:29] is the sub-list for method output_type
	17, // [17:23] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_proto_reminder_proto_init() }
func file_proto_reminder_proto_init() {
	if File_proto_reminder_proto != nil {
		return
	}
	file_proto_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_reminder_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_reminder_proto_goTypes,
		DependencyIndexes: file_proto_reminder_proto_depIdxs,
		EnumInfos:         file_proto_reminder_proto_enumTypes,
		MessageInfos:      file_proto_reminder_proto_msgTypes,
	}.Build()
	File_proto_reminder_proto = out.File
	file_proto_reminder_proto_rawDesc = nil
	file_proto_reminder_proto_goTypes = nil
	file_proto_reminder_proto_depIdxs = nil
}
